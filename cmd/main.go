package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"mac-provisioner/internal/config"
	"mac-provisioner/internal/device"
	"mac-provisioner/internal/dfu"
	"mac-provisioner/internal/notification"
	"mac-provisioner/internal/provisioner"
	"mac-provisioner/internal/stats"
)

func main() {
	log.Println("üöÄ –ó–∞–ø—É—Å–∫ Mac Provisioner...")

	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}
	log.Printf("‚öôÔ∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: %v  |  –ì–æ–ª–æ—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: %s",
		cfg.Monitoring.CheckInterval, cfg.Notifications.Voice)

	ctx, cancel := context.WithCancel(context.Background())

	// Ctrl-C / kill
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// Core components
	notifier := notification.New(cfg.Notifications)
	statsMgr := stats.New()
	dfuManager := dfu.New()
	deviceMonitor := device.NewMonitor(cfg.Monitoring)
	provManager := provisioner.New(dfuManager, notifier, statsMgr)

	notifier.SystemStarted()

	if err := deviceMonitor.Start(ctx); err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤: %v", err)
	}

	go handleDeviceEvents(ctx, deviceMonitor, provManager, notifier, dfuManager)
	go debugConnectedDevices(ctx, deviceMonitor, 30*time.Second)

	log.Println("‚úÖ Mac Provisioner –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
	log.Println("üîå –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Mac —á–µ—Ä–µ–∑ USB-C –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ—à–∏–≤–∫–∏...")

	<-sigChan

	// graceful-shutdown
	log.Println("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
	notifier.SystemShutdown()
	cancel()
	deviceMonitor.Stop()
	time.Sleep(2 * time.Second)
	log.Println("üëã –ì–æ—Ç–æ–≤–æ.")
}

/*
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

	–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
*/
func handleDeviceEvents(
	ctx context.Context,
	monitor *device.Monitor,
	provManager *provisioner.Manager,
	notifier *notification.Manager,
	dfuManager *dfu.Manager,
) {
	for {
		select {
		case <-ctx.Done():
			return
		case ev, ok := <-monitor.Events():
			if !ok {
				return
			}
			log.Printf("üì® %s: %s", strings.ToUpper(ev.Type), ev.Device.GetFriendlyName())

			switch ev.Type {
			case device.EventConnected:
				onConnected(ctx, ev.Device, provManager, notifier, dfuManager)
			case device.EventDisconnected:
				notifier.DeviceDisconnected(ev.Device)
			case device.EventStateChanged:
				onStateChanged(ctx, ev.Device, provManager, notifier)
			}
		}
	}
}

func onConnected(
	ctx context.Context,
	dev *device.Device,
	prov *provisioner.Manager,
	notifier *notification.Manager,
	dfuMgr *dfu.Manager,
) {
	// –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ DFU-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ECID ‚Äî —Å—Ä–∞–∑—É –Ω–∞ –ø—Ä–æ—à–∏–≤–∫—É.
	if dev.IsDFU && dev.ECID != "" {
		notifier.DeviceDetected(dev)
		go prov.ProcessDevice(ctx, dev)
		return
	}

	// –û–±—ã—á–Ω—ã–π Mac (Normal mode) ‚Äî –∑–∞—Ö–æ—Ç–∏–º –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ DFU.
	if dev.IsNormalMac() {

		// NEW: –µ—Å–ª–∏ —ç—Ç–æ—Ç USB-–ø–æ—Ä—Ç —É–∂–µ ¬´–∑–∞–Ω—è—Ç¬ª –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ—à–∏–≤–∫–æ–π ‚Äî
		// –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–±—Ä–æ—Å–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ DFU.
		if prov.IsProcessingUSB(dev.USBLocation) {
			log.Printf("‚ÑπÔ∏è %s —É–∂–µ –ø—Ä–æ—à–∏–≤–∞–µ—Ç—Å—è (USB %s) ‚Äî –∞–≤—Ç–æ-DFU –ø—Ä–æ–ø—É—â–µ–Ω.",
				dev.GetFriendlyName(), strings.TrimPrefix(dev.USBLocation, "0x"))
			return
		}

		notifier.DeviceConnected(dev)
		notifier.EnteringDFUMode(dev)

		// –ü—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ macvdmtool
		go func(d *device.Device) {
			if err := dfuMgr.EnterDFUMode(ctx, d.USBLocation); err != nil {
				if err.Error() == "macvdmtool –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤ DFU –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω" {
					notifier.ManualDFURequired(d)
					dfuMgr.OfferManualDFU(d.USBLocation)
				} else {
					notifier.Error(fmt.Sprintf("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ DFU: %v", err))
				}
			} else {
				notifier.DFUModeEntered(d)
			}
		}(dev)
	}
}

func onStateChanged(
	ctx context.Context,
	dev *device.Device,
	prov *provisioner.Manager,
	notifier *notification.Manager,
) {
	if dev.IsDFU && dev.ECID != "" {
		notifier.DFUModeEntered(dev)
		go prov.ProcessDevice(ctx, dev)
	} else if dev.IsNormalMac() {
		notifier.DeviceReady(dev)
	}
}

/*
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ

	–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (debug)

‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
*/
func debugConnectedDevices(
	ctx context.Context,
	monitor *device.Monitor,
	interval time.Duration,
) {
	if interval <= 0 {
		interval = 30 * time.Second
	}
	ticker := time.NewTicker(interval)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			return
		case <-ticker.C:
			list := monitor.GetConnectedDevices()
			if len(list) == 0 {
				log.Println("üîç –£—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
				continue
			}
			dfuCount, normalCount := 0, 0
			for _, d := range list {
				if d.IsDFU {
					dfuCount++
				} else {
					normalCount++
				}
			}
			log.Printf("üîç –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: %d DFU + %d Normal", dfuCount, normalCount)

			for i, d := range list {
				if d.IsDFU {
					log.Printf("  %d. DFU: %s (State:%s)", i+1, d.GetFriendlyName(), d.State)
				} else {
					log.Printf("  %d. MAC: %s (USB:%s, State:%s)",
						i+1, d.GetFriendlyName(),
						strings.TrimPrefix(d.USBLocation, "0x"),
						d.State)
				}
			}
		}
	}
}
