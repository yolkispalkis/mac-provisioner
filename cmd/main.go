package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"mac-provisioner/internal/config"
	"mac-provisioner/internal/device"
	"mac-provisioner/internal/dfu"
	"mac-provisioner/internal/notification"
	"mac-provisioner/internal/provisioner"
	"mac-provisioner/internal/stats"
)

func main() {
	log.Println("üöÄ –ó–∞–ø—É—Å–∫ Mac Provisioner...")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	log.Printf("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ %v, –≥–æ–ª–æ—Å %s",
		cfg.Monitoring.CheckInterval, cfg.Notifications.Voice)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
	notifier := notification.New(cfg.Notifications)
	stats := stats.New()
	dfuManager := dfu.New()
	deviceMonitor := device.NewMonitor(cfg.Monitoring)
	provisionerManager := provisioner.New(dfuManager, notifier, stats)

	log.Println("üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

	// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
	notifier.SystemStarted()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	if err := deviceMonitor.Start(ctx); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: %v", err)
	}
	defer deviceMonitor.Stop()

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	go handleDeviceEvents(ctx, deviceMonitor, provisionerManager, notifier)

	// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	go printStats(ctx, stats)

	// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	go debugConnectedDevices(ctx, deviceMonitor)

	log.Println("‚úÖ Mac Provisioner –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
	log.Println("üîç –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Mac —á–µ—Ä–µ–∑ USB-C –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ—à–∏–≤–∫–∏...")

	// –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-sigChan
	log.Println("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
	notifier.SystemShutdown()
	cancel()

	// –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	time.Sleep(3 * time.Second)
}

func handleDeviceEvents(ctx context.Context, monitor *device.Monitor, provisioner *provisioner.Manager, notifier *notification.Manager) {
	log.Println("üéß –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")

	for {
		select {
		case <-ctx.Done():
			log.Println("üõë –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			return
		case event := <-monitor.Events():
			log.Printf("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: %s –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s (%s)",
				event.Type, event.Device.SerialNumber, event.Device.Model)

			switch event.Type {
			case device.EventConnected:
				log.Printf("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: %s (%s) - —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s, DFU: %v",
					event.Device.SerialNumber, event.Device.Model, event.Device.State, event.Device.IsDFU)

				if event.Device.NeedsProvisioning() {
					log.Printf("üîß –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø—Ä–æ—à–∏–≤–∫–µ", event.Device.SerialNumber)
					notifier.DeviceDetected(event.Device.SerialNumber, event.Device.Model)
					go provisioner.ProcessDevice(ctx, event.Device)
				} else {
					log.Printf("‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s —É–∂–µ –ø—Ä–æ—à–∏—Ç–æ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s)",
						event.Device.SerialNumber, event.Device.State)
				}

			case device.EventDisconnected:
				log.Printf("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: %s (%s)", event.Device.SerialNumber, event.Device.Model)
				notifier.DeviceDisconnected(event.Device.SerialNumber, event.Device.Model)

			case device.EventStateChanged:
				log.Printf("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %s (%s) - %s",
					event.Device.SerialNumber, event.Device.Model, event.Device.State)
			}
		}
	}
}

func printStats(ctx context.Context, stats *stats.Manager) {
	ticker := time.NewTicker(10 * time.Minute)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			return
		case <-ticker.C:
			log.Printf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: %s", stats.Summary())
		}
	}
}

func debugConnectedDevices(ctx context.Context, monitor *device.Monitor) {
	ticker := time.NewTicker(30 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			return
		case <-ticker.C:
			devices := monitor.GetConnectedDevices()
			if len(devices) > 0 {
				log.Printf("üîç –û—Ç–ª–∞–¥–∫–∞: –ø–æ–¥–∫–ª—é—á–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: %d", len(devices))
				for i, dev := range devices {
					log.Printf("  %d. %s (%s) - %s [DFU: %v, NeedsProvisioning: %v]",
						i+1, dev.SerialNumber, dev.Model, dev.State, dev.IsDFU, dev.NeedsProvisioning())
				}
			} else {
				log.Println("üîç –û—Ç–ª–∞–¥–∫–∞: –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
			}
		}
	}
}
