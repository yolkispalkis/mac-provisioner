package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"

	"mac-provisioner/internal/config"
	"mac-provisioner/internal/notifier"
	"mac-provisioner/internal/orchestrator"
)

func main() {
	log.SetFlags(log.Ltime)
	log.Println("üöÄ –ó–∞–ø—É—Å–∫ Mac Provisioner (v2, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –Ω–∞ –∫–∞–Ω–∞–ª–∞—Ö)")

	cfg, err := config.Load("config.yaml")
	if err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: %v", err)
	}

	voiceNotifier := notifier.New(
		cfg.Notifications.Enabled,
		cfg.Notifications.Voice,
		cfg.Notifications.Rate,
	)

	app := orchestrator.New(cfg, voiceNotifier)

	ctx, cancel := context.WithCancel(context.Background())

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	go func() {
		<-sigChan
		log.Println("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è...")
		cancel()
	}()

	// –ë–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	app.Start(ctx)

	log.Println("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
}
