package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"mac-provisioner/internal/config"
	"mac-provisioner/internal/device"
	"mac-provisioner/internal/dfu"
	"mac-provisioner/internal/notification"
	"mac-provisioner/internal/provisioner"
	"mac-provisioner/internal/voice"
)

func main() {
	log.Println("üöÄ –ó–∞–ø—É—Å–∫ Mac Provisioner...")

	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
	voiceEngine := voice.New(cfg.Notifications)
	defer voiceEngine.Shutdown()

	notifier := notification.New(cfg.Notifications, voiceEngine)
	dfuManager := dfu.New()
	deviceMonitor := device.NewMonitor(cfg.Monitoring)
	provisionerManager := provisioner.New(dfuManager, notifier)

	// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
	notifier.SystemStarted()

	if err := deviceMonitor.Start(ctx); err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: %v", err)
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	go handleDeviceEvents(ctx, deviceMonitor, provisionerManager, notifier, dfuManager)

	// –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-sigChan

	log.Println("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
	notifier.SystemShutdown()
	cancel()
	deviceMonitor.Stop()
	time.Sleep(time.Second)
	log.Println("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
}

func handleDeviceEvents(
	ctx context.Context,
	monitor *device.Monitor,
	provisioner *provisioner.Manager,
	notifier *notification.Manager,
	dfuMgr *dfu.Manager,
) {
	for {
		select {
		case <-ctx.Done():
			return
		case event := <-monitor.Events():
			handleSingleEvent(ctx, event, provisioner, notifier, dfuMgr)
		}
	}
}

func handleSingleEvent(
	ctx context.Context,
	event device.Event,
	provisioner *provisioner.Manager,
	notifier *notification.Manager,
	dfuMgr *dfu.Manager,
) {
	dev := event.Device
	log.Printf("üì® %s: %s", event.Type, dev.Name)

	switch event.Type {
	case device.EventConnected:
		if dev.IsDFU && dev.State == "DFU" {
			notifier.DFUModeEntered(dev)
			go provisioner.ProcessDevice(ctx, dev)
		} else if dev.IsDFU && dev.State == "Recovery" {
			notifier.DeviceConnected(dev)
			notifier.EnteringDFUMode(dev)
			go enterDFUMode(ctx, dev, dfuMgr, notifier)
		} else if dev.IsNormalMac() {
			notifier.DeviceConnected(dev)
			notifier.EnteringDFUMode(dev)
			go enterDFUMode(ctx, dev, dfuMgr, notifier)
		}

	case device.EventDisconnected:
		notifier.DeviceDisconnected(dev)

	case device.EventStateChanged:
		if dev.IsDFU && dev.State == "DFU" {
			notifier.DFUModeEntered(dev)
			go provisioner.ProcessDevice(ctx, dev)
		}
	}
}

func enterDFUMode(ctx context.Context, dev *device.Device, dfuMgr *dfu.Manager, notifier *notification.Manager) {
	if err := dfuMgr.EnterDFUMode(ctx, dev.USBLocation); err != nil {
		notifier.ManualDFURequired(dev)
	}
}
