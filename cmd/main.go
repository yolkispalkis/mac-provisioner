package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"mac-provisioner/internal/config"
	"mac-provisioner/internal/device"
	"mac-provisioner/internal/dfu"
	"mac-provisioner/internal/notification"
	"mac-provisioner/internal/provisioner"
	"mac-provisioner/internal/stats"
)

func main() {
	log.Println("üöÄ –ó–∞–ø—É—Å–∫ Mac Provisioner...")

	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}
	log.Printf("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ %v, –≥–æ–ª–æ—Å %s",
		cfg.Monitoring.CheckInterval, cfg.Notifications.Voice)

	ctx, cancel := context.WithCancel(context.Background())
	// defer cancel() // –û—Ç–º–µ–Ω—è–µ–º –≤ –∫–æ–Ω—Ü–µ main

	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	notifier := notification.New(cfg.Notifications)
	statsMgr := stats.New() // –ò–∑–º–µ–Ω–µ–Ω–æ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å –ø–∞–∫–µ—Ç–æ–º
	dfuManager := dfu.New()
	// –ü–µ—Ä–µ–¥–∞–µ–º cfg.Monitoring –≤ NewMonitor
	deviceMonitor := device.NewMonitor(cfg.Monitoring)
	provisionerManager := provisioner.New(dfuManager, notifier, statsMgr)

	log.Println("üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
	notifier.SystemStarted()

	if err := deviceMonitor.Start(ctx); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: %v", err)
	}
	// defer deviceMonitor.Stop() // Stop –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º –∏–∑ main

	go handleDeviceEvents(ctx, deviceMonitor, provisionerManager, notifier)
	go printStats(ctx, statsMgr, 10*time.Minute) // –ü–µ—Ä–µ–¥–∞–µ–º statsMgr
	go debugConnectedDevices(ctx, deviceMonitor, 30*time.Second)

	log.Println("‚úÖ Mac Provisioner –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
	log.Println("üîå –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Mac –≤ DFU/Recovery —Ä–µ–∂–∏–º–µ —á–µ—Ä–µ–∑ USB-C –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ—à–∏–≤–∫–∏...")

	<-sigChan // –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	log.Println("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Mac Provisioner...")
	notifier.SystemShutdown() // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏

	cancel() // –û—Ç–º–µ–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –≤—Å–µ –≥–æ—Ä—É—Ç–∏–Ω—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å

	deviceMonitor.Stop() // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä —è–≤–Ω–æ

	// –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –¥—Ä—É–≥–∏—Ö —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
	log.Println("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
	time.Sleep(3 * time.Second)
	log.Println("üëã Mac Provisioner –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
}

func handleDeviceEvents(ctx context.Context, monitor *device.Monitor, provManager *provisioner.Manager, notifier *notification.Manager) {
	log.Println("üéß –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (DFU/Recovery)...")

	for {
		select {
		case <-ctx.Done():
			log.Println("üõë –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω).")
			return
		case event, ok := <-monitor.Events():
			if !ok {
				log.Println("üõë –ö–∞–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–∫—Ä—ã—Ç, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.")
				return
			}

			log.Printf("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: %s –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s (–ú–æ–¥–µ–ª—å: %s, ECID: %s, DFU: %v)",
				event.Type, event.Device.SerialNumber, event.Device.Model, event.Device.ECID, event.Device.IsDFU)

			switch event.Type {
			case device.EventConnected:
				// –° –Ω–æ–≤—ã–º –º–æ–Ω–∏—Ç–æ—Ä–æ–º, –º—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±—É–¥–µ–º –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ DFU/Recovery —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.
				log.Printf("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: %s (%s) - —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %s, DFU: %v",
					event.Device.SerialNumber, event.Device.GetFriendlyName(), event.Device.State, event.Device.IsDFU)

				// NeedsProvisioning —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç IsDFU (–∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å ECID)
				if event.Device.NeedsProvisioning() {
					log.Printf("üîß –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s (ECID: %s) –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø—Ä–æ—à–∏–≤–∫–µ.",
						event.Device.GetFriendlyName(), event.Device.ECID)
					notifier.DeviceDetected(event.Device) // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ DFU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
					go provManager.ProcessDevice(ctx, event.Device)
				} else {
					// –≠—Ç–æ—Ç –±–ª–æ–∫ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–µ–Ω, –µ—Å–ª–∏ NeedsProvisioning = IsDFU
					log.Printf("‚ùì –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s (%s) –ø–æ–¥–∫–ª—é—á–µ–Ω–æ, –Ω–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ—à–∏–≤–∫–∏ (IsDFU: %v, ECID: '%s'). –≠—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ.",
						event.Device.GetFriendlyName(), event.Device.State, event.Device.IsDFU, event.Device.ECID)
					// notifier.DeviceReady(event.Device) // DeviceReady –¥–ª—è DFU —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª–∞
				}

			case device.EventDisconnected:
				log.Printf("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: %s (%s)",
					event.Device.SerialNumber, event.Device.GetFriendlyName())
				notifier.DeviceDisconnected(event.Device)

			case device.EventStateChanged:
				// –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è DFU —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –∫—Ä–æ–º–µ –∫–∞–∫ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏.
				// –ï—Å–ª–∏ –æ–Ω–æ –ø–µ—Ä–µ—à–ª–æ –∏–∑ DFU –≤ –Ω–µ-DFU, –æ–Ω–æ –∏—Å—á–µ–∑–Ω–µ—Ç –∏–∑ system_profiler (–∏ –±—É–¥–µ—Ç Disconnected).
				log.Printf("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %s (%s) - %s. DFU: %v",
					event.Device.SerialNumber, event.Device.GetFriendlyName(), event.Device.State, event.Device.IsDFU)

				// –ï—Å–ª–∏ –æ–Ω–æ –∫–∞–∫-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–æ –≤—Å–µ –µ—â–µ DFU –∏ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ—à–∏–≤–∫–∏
				if event.Device.NeedsProvisioning() {
					log.Printf("üîß –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s (%s) –∏–∑–º–µ–Ω–∏–ª–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ –≤—Å–µ –µ—â–µ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –ø—Ä–æ—à–∏–≤–∫–µ.",
						event.Device.GetFriendlyName(), event.Device.State)
					go provManager.ProcessDevice(ctx, event.Device)
				}
			}
		}
	}
}

// printStats –∏ debugConnectedDevices —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
func printStats(ctx context.Context, statsMgr *stats.Manager, interval time.Duration) {
	if interval == 0 {
		interval = 10 * time.Minute // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}
	ticker := time.NewTicker(interval)
	defer ticker.Stop()

	log.Printf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –∫–∞–∂–¥—ã–µ %v", interval)
	for {
		select {
		case <-ctx.Done():
			log.Println("üìä –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
			return
		case <-ticker.C:
			log.Printf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: %s", statsMgr.Summary())
		}
	}
}

func debugConnectedDevices(ctx context.Context, monitor *device.Monitor, interval time.Duration) {
	if interval == 0 {
		interval = 30 * time.Second // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}
	ticker := time.NewTicker(interval)
	defer ticker.Stop()

	log.Printf("üîç –û—Ç–ª–∞–¥–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –∫–∞–∂–¥—ã–µ %v", interval)
	for {
		select {
		case <-ctx.Done():
			log.Println("üîç –û—Ç–ª–∞–¥–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
			return
		case <-ticker.C:
			devicesList := monitor.GetConnectedDevices() // –ò–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–∑–º–µ–Ω–µ–Ω–æ
			if len(devicesList) > 0 {
				log.Printf("üîç –û—Ç–ª–∞–¥–∫–∞: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ DFU/Recovery —É—Å—Ç—Ä–æ–π—Å—Ç–≤: %d", len(devicesList))
				for i, dev := range devicesList {
					log.Printf("  %d. SN: %s (–ú–æ–¥–µ–ª—å: %s, –°–æ—Å—Ç–æ—è–Ω–∏–µ: %s, ECID: %s, DFU: %v, NeedsProv: %v)",
						i+1, dev.SerialNumber, dev.Model, dev.State, dev.ECID, dev.IsDFU, dev.NeedsProvisioning())
				}
			} else {
				log.Println("üîç –û—Ç–ª–∞–¥–∫–∞: –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö DFU/Recovery —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ (system_profiler).")
			}
		}
	}
}
