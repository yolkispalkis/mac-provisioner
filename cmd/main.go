package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"mac-provisioner/internal/config"
	"mac-provisioner/internal/device"
	"mac-provisioner/internal/dfu"
	"mac-provisioner/internal/notification"
	"mac-provisioner/internal/provisioner"
	"mac-provisioner/internal/stats"
)

func main() {
	log.Println("üöÄ –ó–∞–ø—É—Å–∫ Mac Provisioner...")

	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}
	log.Printf("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞: –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ %v, –≥–æ–ª–æ—Å %s",
		cfg.Monitoring.CheckInterval, cfg.Notifications.Voice)

	ctx, cancel := context.WithCancel(context.Background())

	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	notifier := notification.New(cfg.Notifications)
	statsMgr := stats.New()
	dfuManager := dfu.New()
	deviceMonitor := device.NewMonitor(cfg.Monitoring)
	provisionerManager := provisioner.New(dfuManager, notifier, statsMgr)

	log.Println("üîß –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
	notifier.SystemStarted()

	if err := deviceMonitor.Start(ctx); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: %v", err)
	}

	go handleDeviceEvents(ctx, deviceMonitor, provisionerManager, notifier, dfuManager)
	go printStats(ctx, statsMgr, 10*time.Minute)
	go debugConnectedDevices(ctx, deviceMonitor, 30*time.Second)

	log.Println("‚úÖ Mac Provisioner –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
	log.Println("üîå –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Mac —á–µ—Ä–µ–∑ USB-C –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ—à–∏–≤–∫–∏...")

	<-sigChan
	log.Println("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Mac Provisioner...")
	notifier.SystemShutdown()

	cancel()
	deviceMonitor.Stop()

	log.Println("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...")
	time.Sleep(3 * time.Second)
	log.Println("üëã Mac Provisioner –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
}

func handleDeviceEvents(ctx context.Context, monitor *device.Monitor, provManager *provisioner.Manager, notifier *notification.Manager, dfuManager *dfu.Manager) {
	log.Println("üéß –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")

	for {
		select {
		case <-ctx.Done():
			log.Println("üõë –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω).")
			return
		case event, ok := <-monitor.Events():
			if !ok {
				log.Println("üõë –ö–∞–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–∫—Ä—ã—Ç, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è.")
				return
			}

			log.Printf("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: %s –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s (–ú–æ–¥–µ–ª—å: %s, ECID: %s, DFU: %v)",
				event.Type, event.Device.SerialNumber, event.Device.Model, event.Device.ECID, event.Device.IsDFU)

			switch event.Type {
			case device.EventConnected:
				if event.Device.IsDFU && event.Device.ECID != "" {
					// –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –≤ DFU/Recovery - —Å—Ä–∞–∑—É –ø—Ä–æ—à–∏–≤–∞–µ–º
					log.Printf("üîß DFU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s (ECID: %s) –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ—à–∏–≤–∫–µ.",
						event.Device.GetFriendlyName(), event.Device.ECID)
					notifier.DeviceDetected(event.Device)
					go provManager.ProcessDevice(ctx, event.Device)
				} else if event.Device.IsNormalMac() {
					// –û–±—ã—á–Ω—ã–π Mac - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ DFU
					log.Printf("üíª –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ–±—ã—á–Ω—ã–π Mac %s (%s). –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ DFU —Ä–µ–∂–∏–º...",
						event.Device.GetFriendlyName(), event.Device.SerialNumber)
					notifier.DeviceConnected(event.Device)
					notifier.EnteringDFUMode(event.Device)

					go func(dev *device.Device) {
						if err := dfuManager.EnterDFUMode(ctx, dev.SerialNumber); err != nil {
							log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ %s –≤ DFU: %v", dev.SerialNumber, err)
							if err.Error() == "macvdmtool –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—Ö–æ–¥ –≤ DFU –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω" {
								notifier.ManualDFURequired(dev)
								dfuManager.OfferManualDFU(dev.SerialNumber)
							} else {
								notifier.Error(fmt.Sprintf("–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ DFU –¥–ª—è %s: %v", dev.SerialNumber, err))
							}
						} else {
							log.Printf("‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ DFU —Ä–µ–∂–∏–º", dev.SerialNumber)
							notifier.DFUModeEntered(dev)
						}
					}(event.Device)
				} else {
					log.Printf("‚ùì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: %s (DFU: %v, ECID: '%s')",
						event.Device.GetFriendlyName(), event.Device.IsDFU, event.Device.ECID)
				}

			case device.EventDisconnected:
				log.Printf("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: %s (%s)",
					event.Device.SerialNumber, event.Device.GetFriendlyName())
				notifier.DeviceDisconnected(event.Device)

			case device.EventStateChanged:
				log.Printf("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %s (%s) - %s. DFU: %v",
					event.Device.SerialNumber, event.Device.GetFriendlyName(), event.Device.State, event.Device.IsDFU)

				// –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ—à–ª–æ –≤ DFU –∏ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ—à–∏–≤–∫–µ
				if event.Device.IsDFU && event.Device.ECID != "" {
					log.Printf("üîß –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s –ø–µ—Ä–µ—à–ª–æ –≤ DFU –∏ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ—à–∏–≤–∫–µ.",
						event.Device.GetFriendlyName())
					notifier.DFUModeEntered(event.Device)
					go provManager.ProcessDevice(ctx, event.Device)
				} else if event.Device.IsNormalMac() {
					// –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Å–ª–µ –ø—Ä–æ—à–∏–≤–∫–∏)
					log.Printf("‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s –≤–µ—Ä–Ω—É–ª–æ—Å—å –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º.",
						event.Device.GetFriendlyName())
					notifier.DeviceReady(event.Device)
				}
			}
		}
	}
}

func printStats(ctx context.Context, statsMgr *stats.Manager, interval time.Duration) {
	if interval == 0 {
		interval = 10 * time.Minute
	}
	ticker := time.NewTicker(interval)
	defer ticker.Stop()

	log.Printf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –∫–∞–∂–¥—ã–µ %v", interval)
	for {
		select {
		case <-ctx.Done():
			log.Println("üìä –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
			return
		case <-ticker.C:
			log.Printf("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: %s", statsMgr.Summary())
		}
	}
}

func debugConnectedDevices(ctx context.Context, monitor *device.Monitor, interval time.Duration) {
	if interval == 0 {
		interval = 30 * time.Second
	}
	ticker := time.NewTicker(interval)
	defer ticker.Stop()

	log.Printf("üîç –û—Ç–ª–∞–¥–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –±—É–¥–µ—Ç –≤—ã–≤–æ–¥–∏—Ç—å—Å—è –∫–∞–∂–¥—ã–µ %v", interval)
	for {
		select {
		case <-ctx.Done():
			log.Println("üîç –û—Ç–ª–∞–¥–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
			return
		case <-ticker.C:
			devicesList := monitor.GetConnectedDevices()
			if len(devicesList) > 0 {
				dfuCount := 0
				normalCount := 0
				for _, dev := range devicesList {
					if dev.IsDFU {
						dfuCount++
					} else {
						normalCount++
					}
				}
				log.Printf("üîç –û—Ç–ª–∞–¥–∫–∞: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: %d DFU/Recovery + %d –æ–±—ã—á–Ω—ã—Ö Mac", dfuCount, normalCount)
				for i, dev := range devicesList {
					if dev.IsDFU {
						log.Printf("  %d. DFU: %s (–ú–æ–¥–µ–ª—å: %s, –°–æ—Å—Ç–æ—è–Ω–∏–µ: %s, ECID: %s, NeedsProv: %v)",
							i+1, dev.SerialNumber, dev.Model, dev.State, dev.ECID, dev.NeedsProvisioning())
					} else {
						log.Printf("  %d. MAC: %s (–ú–æ–¥–µ–ª—å: %s, –°–æ—Å—Ç–æ—è–Ω–∏–µ: %s, NeedsProv: %v)",
							i+1, dev.SerialNumber, dev.Model, dev.State, dev.NeedsProvisioning())
					}
				}
			} else {
				log.Println("üîç –û—Ç–ª–∞–¥–∫–∞: –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö Apple —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
			}
		}
	}
}
