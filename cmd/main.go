package main

import (
	"context"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"mac-provisioner/internal/config"
	"mac-provisioner/internal/device"
	"mac-provisioner/internal/dfu"
	"mac-provisioner/internal/notification"
	"mac-provisioner/internal/provisioner"
	"mac-provisioner/internal/voice"
)

func main() {
	log.Println("üöÄ –ó–∞–ø—É—Å–∫ Mac Provisioner...")

	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
	voiceEngine := voice.New(cfg.Notifications)
	defer voiceEngine.Shutdown()

	notifier := notification.New(cfg.Notifications, voiceEngine)
	dfuManager := dfu.New()
	deviceMonitor := device.NewMonitor(cfg.Monitoring)
	provisionerManager := provisioner.New(dfuManager, notifier, cfg.Provisioning)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π DFU —Ç—Ä–∏–≥–≥–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
	deviceMonitor.SetDFUTrigger(dfuManager.AutoTriggerDFU)
	deviceMonitor.SetProcessingChecker(func(usbLocation string) bool {
		return provisionerManager.IsProcessingByUSB(usbLocation)
	})
	deviceMonitor.SetCooldownChecker(func(usbLocation string) (bool, time.Duration, string) {
		return provisionerManager.IsInCooldown(usbLocation)
	})

	// –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è graceful shutdown
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
	notifier.SystemStarted()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ
	if os.Getenv("MAC_PROV_DEBUG") == "1" {
		log.Printf("üîç [DEBUG] –ü–µ—Ä–∏–æ–¥ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è DFU: %v", cfg.Provisioning.DFUCooldownPeriod)
		log.Printf("üîç [DEBUG] –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %v", cfg.Monitoring.CheckInterval)
	}

	if err := deviceMonitor.Start(ctx); err != nil {
		log.Fatalf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: %v", err)
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	go handleDeviceEvents(ctx, deviceMonitor, provisionerManager, notifier, dfuManager)

	// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ –ø–µ—Ä–∏–æ–¥–æ–≤ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –≤ debug —Ä–µ–∂–∏–º–µ)
	if os.Getenv("MAC_PROV_DEBUG") == "1" {
		go debugCooldownStatus(ctx, provisionerManager, 5*time.Minute)
	}

	// –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-sigChan

	log.Println("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
	notifier.SystemShutdown()
	cancel()
	deviceMonitor.Stop()
	time.Sleep(time.Second)
	log.Println("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ")
}

func handleDeviceEvents(
	ctx context.Context,
	monitor *device.Monitor,
	provisioner *provisioner.Manager,
	notifier *notification.Manager,
	dfuMgr *dfu.Manager,
) {
	for {
		select {
		case <-ctx.Done():
			return
		case event := <-monitor.Events():
			handleSingleEvent(ctx, event, provisioner, notifier, dfuMgr)
		}
	}
}

func handleSingleEvent(
	ctx context.Context,
	event device.Event,
	provisioner *provisioner.Manager,
	notifier *notification.Manager,
	dfuMgr *dfu.Manager,
) {
	dev := event.Device

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
	if shouldLogEvent(event, provisioner) {
		log.Printf("üì® %s: %s", event.Type, dev.GetDisplayName())
	}

	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è
	if provisioner.IsProcessingByUSB(dev.USBLocation) || provisioner.IsProcessingByECID(dev.ECID) {
		if os.Getenv("MAC_PROV_DEBUG") == "1" {
			log.Printf("üîç [DEBUG] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ: %s", dev.GetDisplayName())
		}
		return
	}

	switch event.Type {
	case device.EventConnected:
		handleDeviceConnected(ctx, dev, provisioner, notifier, dfuMgr)

	case device.EventDisconnected:
		// –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
		if !provisioner.IsProcessingByUSB(dev.USBLocation) && !provisioner.IsProcessingByECID(dev.ECID) {
			notifier.DeviceDisconnected(dev)
		}

	case device.EventStateChanged:
		handleDeviceStateChanged(ctx, dev, provisioner, notifier, dfuMgr)
	}
}

// shouldLogEvent –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ
func shouldLogEvent(event device.Event, provisioner *provisioner.Manager) bool {
	dev := event.Device

	// –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	if event.Type == device.EventConnected {
		return true
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
	if event.Type == device.EventDisconnected {
		return !provisioner.IsProcessingByUSB(dev.USBLocation) && !provisioner.IsProcessingByECID(dev.ECID)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ DFU
	if event.Type == device.EventStateChanged {
		return dev.IsDFU && dev.State == "DFU"
	}

	return false
}

func handleDeviceConnected(
	ctx context.Context,
	dev *device.Device,
	provisioner *provisioner.Manager,
	notifier *notification.Manager,
	dfuMgr *dfu.Manager,
) {
	if dev.IsDFU && dev.State == "DFU" && dev.ECID != "" {
		// –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –≤ DFU —Ä–µ–∂–∏–º–µ - –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—à–∏–≤–∫—É
		notifier.DFUModeEntered(dev)
		go provisioner.ProcessDevice(ctx, dev)
	} else if dev.IsDFU && dev.State == "Recovery" {
		// –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ Recovery —Ä–µ–∂–∏–º–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
		if inCooldown, remaining, lastDevice := provisioner.IsInCooldown(dev.USBLocation); inCooldown {
			if os.Getenv("MAC_PROV_DEBUG") == "1" {
				log.Printf("üîç [DEBUG] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ø–æ—Ä—Ç—É –≤ –ø–µ—Ä–∏–æ–¥–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è (–æ—Å—Ç–∞–ª–æ—Å—å %v, –ø–æ—Å–ª–µ–¥–Ω–µ–µ: %s)",
					dev.GetDisplayName(), remaining.Round(time.Minute), lastDevice)
			}
			notifier.DeviceConnected(dev)
		} else {
			notifier.DeviceConnected(dev)
			notifier.EnteringDFUMode(dev)
		}
	} else if dev.IsNormalMac() {
		// –û–±—ã—á–Ω—ã–π Mac - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
		if inCooldown, remaining, lastDevice := provisioner.IsInCooldown(dev.USBLocation); inCooldown {
			if os.Getenv("MAC_PROV_DEBUG") == "1" {
				log.Printf("üîç [DEBUG] –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –ø–æ—Ä—Ç—É –≤ –ø–µ—Ä–∏–æ–¥–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è (–æ—Å—Ç–∞–ª–æ—Å—å %v, –ø–æ—Å–ª–µ–¥–Ω–µ–µ: %s)",
					dev.GetDisplayName(), remaining.Round(time.Minute), lastDevice)
			}
			notifier.DeviceConnected(dev)
		} else {
			notifier.DeviceConnected(dev)
			notifier.EnteringDFUMode(dev)
		}
	}
}

func handleDeviceStateChanged(
	ctx context.Context,
	dev *device.Device,
	provisioner *provisioner.Manager,
	notifier *notification.Manager,
	dfuMgr *dfu.Manager,
) {
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ö–æ–¥ –≤ DFU —Ä–µ–∂–∏–º
	if dev.IsDFU && dev.State == "DFU" && dev.ECID != "" {
		notifier.DFUModeEntered(dev)
		go provisioner.ProcessDevice(ctx, dev)
	}
}

// debugCooldownStatus –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–∞—Ö –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
func debugCooldownStatus(ctx context.Context, provisioner *provisioner.Manager, interval time.Duration) {
	ticker := time.NewTicker(interval)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			return
		case <-ticker.C:
			cooldowns := provisioner.GetCooldownStatus()
			if len(cooldowns) == 0 {
				log.Println("üîç [DEBUG] –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –Ω–µ—Ç")
			} else {
				log.Printf("üîç [DEBUG] –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è (%d):", len(cooldowns))
				for i, entry := range cooldowns {
					remaining := time.Until(entry.CooldownUntil)
					log.Printf("üîç [DEBUG]   %d. %s (–ø–æ—Ä—Ç: %s, –æ—Å—Ç–∞–ª–æ—Å—å: %v)",
						i+1, entry.DeviceName, entry.USBLocation, remaining.Round(time.Minute))
				}
			}
		}
	}
}
