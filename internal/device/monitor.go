package device

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os/exec"
	"strings"
	"sync"
	"time"

	"mac-provisioner/internal/config"
)

const (
	EventConnected    = "connected"
	EventDisconnected = "disconnected"
	EventStateChanged = "state_changed"
)

type Event struct {
	Type   string  `json:"type"`
	Device *Device `json:"device"`
}

type Monitor struct {
	config       config.MonitoringConfig
	eventChan    chan Event
	devices      map[string]*Device
	devicesMutex sync.RWMutex
	running      bool
	ctx          context.Context
	cancel       context.CancelFunc
	firstScan    bool
}

func NewMonitor(cfg config.MonitoringConfig) *Monitor {
	return &Monitor{
		config:    cfg,
		eventChan: make(chan Event, cfg.EventBufferSize),
		devices:   make(map[string]*Device),
		firstScan: true,
	}
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Vendor ID
const (
	appleVendorIDHex    = "0x05ac"
	appleVendorIDString = "apple_vendor_id"
	dfuModePIDAS        = "0x1281"
	recoveryModePIDAS   = "0x1280"
	dfuModePIDIntelT2   = "0x1227"
)

type SPUSBItem struct {
	Name       string      `json:"_name"`
	ProductID  string      `json:"product_id,omitempty"`
	VendorID   string      `json:"vendor_id,omitempty"`
	SerialNum  string      `json:"serial_num,omitempty"`
	LocationID string      `json:"location_id,omitempty"`
	SubItems   []SPUSBItem `json:"_items,omitempty"`
}

type SPUSBDataType struct {
	Items []SPUSBItem `json:"SPUSBDataType"`
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ECID
func extractECIDFromString(s string) string {
	marker := "ECID:"
	index := strings.Index(s, marker)
	if index == -1 {
		return ""
	}
	sub := s[index+len(marker):]
	endIndex := strings.Index(sub, " ")
	if endIndex == -1 {
		return strings.TrimSpace(sub)
	}
	return strings.TrimSpace(sub[:endIndex])
}

func (m *Monitor) Start(ctx context.Context) error {
	if m.running {
		return fmt.Errorf("–º–æ–Ω–∏—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
	}
	m.running = true
	m.ctx, m.cancel = context.WithCancel(ctx)

	log.Println("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (—á–µ—Ä–µ–∑ system_profiler)...")

	if err := m.checkCfgutilStillNeeded(); err != nil {
		log.Printf("‚ö†Ô∏è %v (cfgutil –≤—Å–µ –µ—â–µ –Ω—É–∂–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)", err)
	}

	if err := m.initialScan(); err != nil {
		log.Printf("‚ö†Ô∏è –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (system_profiler): %v", err)
	}

	go m.monitorLoop()
	go m.cleanupLoop()

	log.Println("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (system_profiler) –∑–∞–ø—É—â–µ–Ω")
	return nil
}

func (m *Monitor) Stop() {
	if !m.running {
		return
	}
	log.Println("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ USB (system_profiler)...")
	m.running = false
	if m.cancel != nil {
		m.cancel()
	}
}

func (m *Monitor) Events() <-chan Event { return m.eventChan }

func (m *Monitor) checkCfgutilStillNeeded() error {
	if _, err := exec.LookPath("cfgutil"); err == nil {
		log.Println("‚úÖ cfgutil –¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–∞–π–¥–µ–Ω –≤ $PATH) –∏ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.")
		return nil
	}
	return fmt.Errorf("cfgutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ $PATH. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Apple Configurator, –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
}

func (m *Monitor) monitorLoop() {
	t := time.NewTicker(m.config.CheckInterval)
	defer t.Stop()
	log.Printf("üîÑ –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (system_profiler) %v", m.config.CheckInterval)

	for {
		select {
		case <-m.ctx.Done():
			log.Println("üõë –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (system_profiler) –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			return
		case <-t.C:
			m.checkDevices()
		}
	}
}

func (m *Monitor) cleanupLoop() {
	t := time.NewTicker(m.config.CleanupInterval)
	defer t.Stop()

	for {
		select {
		case <-m.ctx.Done():
			return
		case <-t.C:
			m.devicesMutex.RLock()
			log.Printf("üßπ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è %d —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (system_profiler)", len(m.devices))
			m.devicesMutex.RUnlock()
		}
	}
}

func (m *Monitor) checkDevices() {
	currentSPDevices := m.fetchCurrentUSBDevices()

	m.devicesMutex.Lock()
	defer m.devicesMutex.Unlock()

	currentDeviceMap := make(map[string]*Device, len(currentSPDevices))
	for _, dev := range currentSPDevices {
		if dev.SerialNumber != "" { // SerialNumber —Ç–µ–ø–µ—Ä—å "DFU-<ECID>"
			currentDeviceMap[dev.SerialNumber] = dev
		} else {
			// –≠—Ç–æ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –µ—Å–ª–∏ extractDevicesRecursively –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±–µ–∑ ECID
			log.Printf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±–µ–∑ —Å–µ—Ä–∏–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞: %s", dev.Model)
		}
	}

	if m.firstScan {
		log.Println("üîç –ü–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (system_profiler) ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è Connected")
		for sn, dev := range currentDeviceMap {
			m.devices[sn] = dev
			m.sendEvent(Event{Type: EventConnected, Device: dev})
		}
		m.firstScan = false
		return
	}

	for sn, currentDev := range currentDeviceMap {
		oldDev, exists := m.devices[sn]
		if !exists {
			m.devices[sn] = currentDev
			m.sendEvent(Event{Type: EventConnected, Device: currentDev})
		} else {
			if oldDev.State != currentDev.State || oldDev.IsDFU != currentDev.IsDFU || oldDev.USBLocation != currentDev.USBLocation || oldDev.ECID != currentDev.ECID {
				m.devices[sn] = currentDev
				m.sendEvent(Event{Type: EventStateChanged, Device: currentDev})
			}
		}
	}

	for sn, oldDev := range m.devices {
		if _, exists := currentDeviceMap[sn]; !exists {
			delete(m.devices, sn)
			m.sendEvent(Event{Type: EventDisconnected, Device: oldDev})
		}
	}
}

func (m *Monitor) fetchCurrentUSBDevices() []*Device {
	cmd := exec.CommandContext(m.ctx, "system_profiler", "SPUSBDataType", "-json")
	var out bytes.Buffer
	var stderr bytes.Buffer
	cmd.Stdout = &out
	cmd.Stderr = &stderr

	err := cmd.Run()
	if err != nil {
		if m.ctx.Err() == context.Canceled {
			return nil
		}
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è system_profiler SPUSBDataType: %v, stderr: %s", err, stderr.String())
		return nil
	}

	var data SPUSBDataType
	if err := json.Unmarshal(out.Bytes(), &data); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ system_profiler: %v", err)
		return nil
	}

	var detectedDevices []*Device
	for _, usbControllerInfo := range data.Items { // SPUSBDataType —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤/—Ö–∞–±–æ–≤ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
		m.extractDevicesRecursively(&usbControllerInfo, &detectedDevices)
	}
	return detectedDevices
}

func (m *Monitor) extractDevicesRecursively(spItem *SPUSBItem, devices *[]*Device) {
	// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	// log.Printf("DEBUG_USB_MONITOR: Checking item: Name='%s', VID='%s', PID='%s', SN_Raw='%s'", spItem.Name, spItem.VendorID, spItem.ProductID, spItem.SerialNum)

	isApple := strings.EqualFold(spItem.VendorID, appleVendorIDHex) || strings.EqualFold(spItem.VendorID, appleVendorIDString)

	if isApple {
		// log.Printf("DEBUG_USB_MONITOR: Apple VID ('%s') matched. Name='%s', PID='%s'", spItem.VendorID, spItem.Name, spItem.ProductID)
		pidLower := strings.ToLower(spItem.ProductID)
		isDFUMode := false
		deviceState := "Unknown"
		deviceModel := spItem.Name // –ò–º—è USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –º–æ–¥–µ–ª—å Mac

		// matchedPID –±—ã–ª –∑–¥–µ—Å—å, –Ω–æ —É–¥–∞–ª–µ–Ω, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
		switch pidLower {
		case dfuModePIDAS:
			isDFUMode = true
			deviceState = "DFU"
			deviceModel = "Apple Silicon (DFU Mode)"
		case recoveryModePIDAS:
			isDFUMode = true
			deviceState = "Recovery"
			deviceModel = "Apple Silicon (Recovery Mode)"
		case dfuModePIDIntelT2:
			isDFUMode = true
			deviceState = "DFU"
			deviceModel = "Intel T2 (DFU Mode)"
		}

		// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ PID –Ω–µ –ø–æ–¥–æ—à–µ–ª, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å,
		// –µ—Å–ª–∏ –æ–Ω–æ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏.
		// if !isDFUMode && isApple { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ isDFUMode –≤—Å–µ –µ—â–µ false
		// 	log.Printf("DEBUG_USB_MONITOR: Apple device, but PID '%s' for '%s' did not match DFU/Recovery PIDs.", pidLower, spItem.Name)
		// }

		if isDFUMode {
			dev := &Device{
				Model:       deviceModel,
				State:       deviceState,
				IsDFU:       true,
				USBLocation: spItem.LocationID,
			}

			parsedECID := extractECIDFromString(spItem.SerialNum)
			if parsedECID != "" {
				dev.ECID = parsedECID
				dev.SerialNumber = "DFU-" + strings.ToLower(dev.ECID)
				// log.Printf("DEBUG_USB_MONITOR: DFU/Recovery device created: SN='%s', Model='%s', ECID='%s'", dev.SerialNumber, dev.Model, dev.ECID)
			} else {
				log.Printf("‚ö†Ô∏è DFU/Recovery device (%s) - ECID not found in serial_num: '%s'. Device will be ignored.", deviceModel, spItem.SerialNum)
			}

			if dev.ECID != "" && dev.IsValidSerial() {
				*devices = append(*devices, dev)
			} else if dev.ECID != "" {
				log.Printf("‚ö†Ô∏è DFU/Recovery device (ECID: %s) has invalid SerialNumber ('%s') after ECID parsing. Device will be ignored.", dev.ECID, dev.SerialNumber)
			}
		}
	}

	if spItem.SubItems != nil {
		for i := range spItem.SubItems {
			m.extractDevicesRecursively(&spItem.SubItems[i], devices)
		}
	}
}

func (m *Monitor) sendEvent(e Event) {
	sendTimeout := time.NewTimer(100 * time.Millisecond)
	defer sendTimeout.Stop()

	select {
	case m.eventChan <- e:
	case <-m.ctx.Done():
		log.Println("‚ÑπÔ∏è –ö–∞–Ω–∞–ª —Å–æ–±—ã—Ç–∏–π –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç (–∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω), —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ.")
	case <-sendTimeout.C:
		log.Printf("‚ö†Ô∏è –ë—É—Ñ–µ—Ä —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω (—Ç–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏), —Å–æ–±—ã—Ç–∏–µ %s –¥–ª—è %s –ø—Ä–æ–ø—É—â–µ–Ω–æ!", e.Type, e.Device.SerialNumber)
	}
}

func (m *Monitor) initialScan() error {
	log.Println("üîç –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ USB-—É—Å—Ç—Ä–æ–π—Å—Ç–≤ (system_profiler)...")
	devices := m.fetchCurrentUSBDevices()

	m.devicesMutex.Lock()
	defer m.devicesMutex.Unlock()

	count := 0
	for _, dev := range devices {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ DFU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –≤–∞–ª–∏–¥–Ω—ã–º SerialNumber (–Ω–∞ –æ—Å–Ω–æ–≤–µ ECID)
		if dev.IsDFU && dev.SerialNumber != "" { // IsValidSerial —É–∂–µ —É—á—Ç–µ–Ω–æ –≤ extractDevicesRecursively
			log.Printf("üì± –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (DFU/Recovery): %s (%s) - %s, ECID: %s",
				dev.SerialNumber, dev.Model, dev.State, dev.ECID)
			count++
		}
	}
	log.Printf("‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ (system_profiler): %d DFU/Recovery —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.", count)
	return nil
}

func (m *Monitor) GetConnectedDevices() []*Device {
	m.devicesMutex.RLock()
	defer m.devicesMutex.RUnlock()

	connected := make([]*Device, 0, len(m.devices))
	for _, dev := range m.devices {
		dCopy := *dev
		connected = append(connected, &dCopy)
	}
	return connected
}
