package device

import (
	"context"
	"fmt"
	"log"
	"os/exec"
	"strings"
	"sync"
	"time"

	"mac-provisioner/internal/config"
)

const (
	EventConnected    = "connected"
	EventDisconnected = "disconnected"
	EventStateChanged = "state_changed"
)

type Event struct {
	Type   string  `json:"type"`
	Device *Device `json:"device"`
}

type Monitor struct {
	config       config.MonitoringConfig
	eventChan    chan Event
	devices      map[string]*Device
	devicesMutex sync.RWMutex
	running      bool
	ctx          context.Context
	cancel       context.CancelFunc
	firstScan    bool
}

func NewMonitor(cfg config.MonitoringConfig) *Monitor {
	return &Monitor{
		config:    cfg,
		eventChan: make(chan Event, cfg.EventBufferSize),
		devices:   make(map[string]*Device),
		firstScan: true,
	}
}

func (m *Monitor) Start(ctx context.Context) error {
	if m.running {
		return fmt.Errorf("–º–æ–Ω–∏—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
	}

	m.running = true
	m.ctx, m.cancel = context.WithCancel(ctx)

	log.Println("üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å cfgutil
	if err := m.checkCfgutilAvailable(); err != nil {
		log.Printf("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: %v", err)
	}

	// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
	if err := m.initialScan(); err != nil {
		log.Printf("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: %v", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π
	go m.monitorLoop()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
	go m.cleanupLoop()

	log.Println("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ USB —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∑–∞–ø—É—â–µ–Ω")
	return nil
}

func (m *Monitor) Stop() {
	if !m.running {
		return
	}

	log.Println("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ USB...")
	m.running = false

	if m.cancel != nil {
		m.cancel()
	}

	close(m.eventChan)
}

func (m *Monitor) Events() <-chan Event {
	return m.eventChan
}

func (m *Monitor) checkCfgutilAvailable() error {
	cmd := exec.Command("cfgutil", "--version")
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("cfgutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Apple Configurator 2 —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}
	log.Println("‚úÖ cfgutil –¥–æ—Å—Ç—É–ø–µ–Ω")
	return nil
}

func (m *Monitor) monitorLoop() {
	ticker := time.NewTicker(m.config.CheckInterval)
	defer ticker.Stop()

	log.Printf("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º %v", m.config.CheckInterval)

	for {
		select {
		case <-m.ctx.Done():
			log.Println("üõë –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
			return
		case <-ticker.C:
			m.checkDevices()
		}
	}
}

func (m *Monitor) cleanupLoop() {
	ticker := time.NewTicker(m.config.CleanupInterval)
	defer ticker.Stop()

	for {
		select {
		case <-m.ctx.Done():
			return
		case <-ticker.C:
			m.cleanup()
		}
	}
}

func (m *Monitor) checkDevices() {
	currentDevices := m.getCurrentDevices()

	m.devicesMutex.Lock()
	defer m.devicesMutex.Unlock()

	// –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Ç–µ–∫—É—â–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	currentMap := make(map[string]*Device)
	for _, dev := range currentDevices {
		if dev.IsValidSerial() {
			currentMap[dev.SerialNumber] = dev
		}
	}

	// –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	// –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	if m.firstScan {
		log.Println("üîç –ü–µ—Ä–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
		for serial, dev := range currentMap {
			m.devices[serial] = dev
			log.Printf("üÜï –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: %s (%s) - %s", serial, dev.Model, dev.State)
			m.sendEvent(Event{Type: EventConnected, Device: dev})
		}
		m.firstScan = false
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
	for serial, dev := range currentMap {
		if existing, exists := m.devices[serial]; !exists {
			log.Printf("üÜï –ù–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ: %s (%s)", serial, dev.Model)
			m.devices[serial] = dev
			m.sendEvent(Event{Type: EventConnected, Device: dev})
		} else if existing.State != dev.State || existing.IsDFU != dev.IsDFU {
			log.Printf("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %s (%s) %s -> %s", serial, dev.Model, existing.State, dev.State)
			m.devices[serial] = dev
			m.sendEvent(Event{Type: EventStateChanged, Device: dev})
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
	for serial, dev := range m.devices {
		if _, exists := currentMap[serial]; !exists {
			log.Printf("üîå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ: %s (%s)", serial, dev.Model)
			delete(m.devices, serial)
			m.sendEvent(Event{Type: EventDisconnected, Device: dev})
		}
	}
}

func (m *Monitor) getCurrentDevices() []*Device {
	var devices []*Device

	// –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ cfgutil
	cfgutilDevices := m.getCfgutilDevices()
	devices = append(devices, cfgutilDevices...)

	// –ü–æ–ª—É—á–∞–µ–º DFU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
	dfuDevices := m.getDFUDevices()
	devices = append(devices, dfuDevices...)

	return m.removeDuplicates(devices)
}

func (m *Monitor) getCfgutilDevices() []*Device {
	cmd := exec.Command("cfgutil", "list")
	output, err := cmd.Output()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è cfgutil list: %v", err)
		return nil
	}

	return m.parseCfgutilOutput(string(output))
}

func (m *Monitor) getDFUDevices() []*Device {
	cmd := exec.Command("cfgutil", "list")
	output, err := cmd.Output()
	if err != nil {
		return nil
	}

	return m.parseDFUOutput(string(output))
}

func (m *Monitor) parseCfgutilOutput(output string) []*Device {
	var devices []*Device
	lines := strings.Split(output, "\n")

	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" {
			continue
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º DFU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
		if strings.HasPrefix(line, "Type:") && strings.Contains(line, "ECID:") {
			continue
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
		if strings.HasPrefix(line, "ECID") || strings.HasPrefix(line, "Name") {
			continue
		}

		device := m.parseDeviceLine(line)
		if device != nil && !device.IsDFU {
			devices = append(devices, device)
			log.Printf("‚úÖ –û–±—ã—á–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ cfgutil: %s (%s) - %s", device.SerialNumber, device.Model, device.State)
		}
	}

	return devices
}

func (m *Monitor) parseDFUOutput(output string) []*Device {
	var devices []*Device
	lines := strings.Split(output, "\n")

	for _, line := range lines {
		line = strings.TrimSpace(line)
		if !strings.Contains(line, "Type:") || !strings.Contains(line, "ECID:") {
			continue
		}

		device := m.parseDFULine(line)
		if device != nil {
			devices = append(devices, device)
			log.Printf("‚úÖ DFU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: %s (ECID: %s)", device.Model, device.ECID)
		}
	}

	return devices
}

func (m *Monitor) parseDeviceLine(line string) *Device {
	device := &Device{}

	// –ü–∞—Ä—Å–∏–º —Ñ–æ—Ä–º–∞—Ç —Å —Ç–∞–±—É–ª—è—Ü–∏–µ–π (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç cfgutil)
	if strings.Contains(line, "\t") {
		parts := strings.Split(line, "\t")
		if len(parts) >= 3 {
			device.SerialNumber = strings.TrimSpace(parts[0])
			device.Model = strings.TrimSpace(parts[1])
			device.State = strings.TrimSpace(parts[2])

			state := strings.ToLower(device.State)
			device.IsDFU = strings.Contains(state, "dfu") || strings.Contains(state, "recovery")

			return device
		}
	}

	// –ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç cfgutil
	parts := strings.Fields(line)
	if len(parts) >= 1 {
		device.SerialNumber = parts[0]

		// –ò–∑–≤–ª–µ–∫–∞–µ–º –º–æ–¥–µ–ª—å –∏–∑ —Å–∫–æ–±–æ–∫
		if start := strings.Index(line, "("); start != -1 {
			if end := strings.Index(line[start:], ")"); end != -1 {
				device.Model = line[start+1 : start+end]
			}
		}

		// –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ—Ñ–∏—Å–∞
		if dashIndex := strings.LastIndex(line, " - "); dashIndex != -1 {
			device.State = strings.TrimSpace(line[dashIndex+3:])
		} else {
			device.State = "Unknown"
		}

		state := strings.ToLower(device.State)
		device.IsDFU = strings.Contains(state, "dfu") || strings.Contains(state, "recovery")

		return device
	}

	return nil
}

func (m *Monitor) parseDFULine(line string) *Device {
	device := &Device{
		IsDFU: true,
		State: "DFU",
	}

	// –†–∞–∑–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –ø–æ–ª—è–º
	parts := strings.Fields(line)

	for i, part := range parts {
		if part == "Type:" && i+1 < len(parts) {
			device.Model = parts[i+1]
		} else if part == "ECID:" && i+1 < len(parts) {
			device.ECID = parts[i+1]
			// –î–ª—è DFU —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º ECID –∫–∞–∫ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä
			device.SerialNumber = "DFU-" + parts[i+1]
		}
	}

	return device
}

func (m *Monitor) removeDuplicates(devices []*Device) []*Device {
	seen := make(map[string]bool)
	var result []*Device

	for _, device := range devices {
		if device.SerialNumber != "" && !seen[device.SerialNumber] {
			seen[device.SerialNumber] = true
			result = append(result, device)
		}
	}

	return result
}

func (m *Monitor) sendEvent(event Event) {
	select {
	case m.eventChan <- event:
		log.Printf("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: %s –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s", event.Type, event.Device.SerialNumber)
	default:
		log.Println("‚ö†Ô∏è –ë—É—Ñ–µ—Ä —Å–æ–±—ã—Ç–∏–π –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
	}
}

func (m *Monitor) initialScan() error {
	log.Println("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...")
	devices := m.getCurrentDevices()

	m.devicesMutex.Lock()
	defer m.devicesMutex.Unlock()

	// –ü—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞,
	// —Å–æ–±—ã—Ç–∏—è –±—É–¥—É—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
	for _, dev := range devices {
		if dev.IsValidSerial() {
			log.Printf("üì± –ù–∞–π–¥–µ–Ω–æ –ø—Ä–∏ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: %s (%s) - %s", dev.SerialNumber, dev.Model, dev.State)
		}
	}

	log.Printf("‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –Ω–∞–π–¥–µ–Ω–æ %d —É—Å—Ç—Ä–æ–π—Å—Ç–≤", len(devices))
	return nil
}

func (m *Monitor) cleanup() {
	m.devicesMutex.Lock()
	defer m.devicesMutex.Unlock()

	log.Printf("üßπ –û—á–∏—Å—Ç–∫–∞: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è %d —É—Å—Ç—Ä–æ–π—Å—Ç–≤", len(m.devices))
}

func (m *Monitor) GetConnectedDevices() []*Device {
	m.devicesMutex.RLock()
	defer m.devicesMutex.RUnlock()

	var devices []*Device
	for _, dev := range m.devices {
		devices = append(devices, dev)
	}

	return devices
}
