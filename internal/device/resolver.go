package device

import (
	"bytes"
	"context"
	"encoding/json"
	"log"
	"os"
	"os/exec"
	"strconv"
	"strings"
	"sync"
	"time"
)

// DeviceResolver –ø–æ–ª—É—á–∞–µ—Ç –∏–º–µ–Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏–∑ cfgutil
type DeviceResolver struct {
	cache     map[string]CachedDevice
	mutex     sync.RWMutex
	debugMode bool
}

type CachedDevice struct {
	Name     string
	CachedAt time.Time
	TTL      time.Duration
}

type CfgutilResponse struct {
	Output map[string]CfgutilDevice `json:"Output"`
}

type CfgutilDevice struct {
	Name       *string `json:"name"`
	DeviceType string  `json:"deviceType"`
}

func NewDeviceResolver() *DeviceResolver {
	return &DeviceResolver{
		cache:     make(map[string]CachedDevice),
		debugMode: os.Getenv("MAC_PROV_DEBUG") == "1",
	}
}

// ResolveDeviceNameSync —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ ECID
func (dr *DeviceResolver) ResolveDeviceNameSync(ctx context.Context, ecid, fallbackName string) string {
	if ecid == "" {
		return fallbackName
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
	dr.mutex.RLock()
	if cached, exists := dr.cache[ecid]; exists {
		if time.Since(cached.CachedAt) < cached.TTL {
			dr.mutex.RUnlock()
			if dr.debugMode {
				log.Printf("üîç [DEBUG] –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –∫—ç—à–∞: %s -> %s", ecid, cached.Name)
			}
			return cached.Name
		}
	}
	dr.mutex.RUnlock()

	// –ü–æ–ª—É—á–∞–µ–º –∏–∑ cfgutil —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
	name := dr.fetchFromCfgutil(ctx, ecid)
	if name == "" {
		if dr.debugMode {
			log.Printf("üîç [DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–º—è –∏–∑ cfgutil –¥–ª—è ECID %s, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback: %s", ecid, fallbackName)
		}
		return fallbackName
	}

	// –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	dr.mutex.Lock()
	dr.cache[ecid] = CachedDevice{
		Name:     name,
		CachedAt: time.Now(),
		TTL:      10 * time.Minute,
	}
	dr.mutex.Unlock()

	if dr.debugMode {
		log.Printf("üîç [DEBUG] –ü–æ–ª—É—á–µ–Ω–æ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ cfgutil: %s -> %s", ecid, name)
	}

	return name
}

// ResolveDeviceName –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
func (dr *DeviceResolver) ResolveDeviceName(ctx context.Context, ecid, fallbackName string) string {
	return dr.ResolveDeviceNameSync(ctx, ecid, fallbackName)
}

// fetchFromCfgutil –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ cfgutil –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
func (dr *DeviceResolver) fetchFromCfgutil(ctx context.Context, ecid string) string {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è cfgutil
	cfgutilCtx, cancel := context.WithTimeout(ctx, 10*time.Second)
	defer cancel()

	cmd := exec.CommandContext(cfgutilCtx, "cfgutil", "--format", "JSON", "list")
	var stdout, stderr bytes.Buffer
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	if err := cmd.Run(); err != nil {
		if dr.debugMode {
			log.Printf("üîç [DEBUG] –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è cfgutil list: %v, stderr: %s", err, stderr.String())
		}
		return ""
	}

	var response CfgutilResponse
	if err := json.Unmarshal(stdout.Bytes(), &response); err != nil {
		if dr.debugMode {
			log.Printf("üîç [DEBUG] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç cfgutil: %v", err)
		}
		return ""
	}

	// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ECID –¥–ª—è –ø–æ–∏—Å–∫–∞
	normalizedSearchECID := dr.normalizeECIDForSearch(ecid)

	// –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ ECID
	for deviceECID, deviceInfo := range response.Output {
		normalizedDeviceECID := dr.normalizeECIDForSearch(deviceECID)

		if normalizedDeviceECID == normalizedSearchECID {
			// –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º name, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ deviceType
			if deviceInfo.Name != nil && *deviceInfo.Name != "" {
				return *deviceInfo.Name
			}
			if deviceInfo.DeviceType != "" {
				return deviceInfo.DeviceType
			}
		}
	}

	return ""
}

// normalizeECIDForSearch –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç ECID –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –µ–¥–∏–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É)
func (dr *DeviceResolver) normalizeECIDForSearch(ecid string) string {
	if ecid == "" {
		return ""
	}

	// –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å 0x –µ—Å–ª–∏ –µ—Å—Ç—å
	clean := strings.TrimPrefix(strings.ToLower(ecid), "0x")

	// –ï—Å–ª–∏ —ç—Ç–æ hex, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ decimal –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
	if dr.isHexString(clean) {
		if value, err := strconv.ParseUint(clean, 16, 64); err == nil {
			return strconv.FormatUint(value, 10)
		}
	}

	// –ï—Å–ª–∏ —É–∂–µ decimal, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
	if dr.isDecimalString(clean) {
		return clean
	}

	return ecid
}

// isHexString –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ hex —á–∏—Å–ª–æ–º
func (dr *DeviceResolver) isHexString(s string) bool {
	if s == "" {
		return false
	}
	for _, r := range s {
		if !((r >= '0' && r <= '9') || (r >= 'a' && r <= 'f')) {
			return false
		}
	}
	return true
}

// isDecimalString –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ decimal —á–∏—Å–ª–æ–º
func (dr *DeviceResolver) isDecimalString(s string) bool {
	if s == "" {
		return false
	}
	for _, r := range s {
		if r < '0' || r > '9' {
			return false
		}
	}
	return true
}

// ClearCache –æ—á–∏—â–∞–µ—Ç –∫—ç—à –∏–º–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤
func (dr *DeviceResolver) ClearCache() {
	dr.mutex.Lock()
	defer dr.mutex.Unlock()
	dr.cache = make(map[string]CachedDevice)
	if dr.debugMode {
		log.Printf("üîç [DEBUG] –ö—ç—à –∏–º–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –æ—á–∏—â–µ–Ω")
	}
}

// GetCacheStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
func (dr *DeviceResolver) GetCacheStats() (int, int) {
	dr.mutex.RLock()
	defer dr.mutex.RUnlock()

	total := len(dr.cache)
	valid := 0
	now := time.Now()

	for _, cached := range dr.cache {
		if now.Sub(cached.CachedAt) < cached.TTL {
			valid++
		}
	}

	return total, valid
}

// cleanupExpiredCache –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞
func (dr *DeviceResolver) StartCleanupRoutine(ctx context.Context) {
	ticker := time.NewTicker(5 * time.Minute)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			return
		case <-ticker.C:
			dr.cleanupExpiredCache()
		}
	}
}

func (dr *DeviceResolver) cleanupExpiredCache() {
	dr.mutex.Lock()
	defer dr.mutex.Unlock()

	now := time.Now()
	var expired []string

	for ecid, cached := range dr.cache {
		if now.Sub(cached.CachedAt) >= cached.TTL {
			delete(dr.cache, ecid)
			expired = append(expired, ecid)
		}
	}

	if len(expired) > 0 && dr.debugMode {
		log.Printf("üîç [DEBUG] –û—á–∏—â–µ–Ω—ã —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞ –∏–º–µ–Ω —É—Å—Ç—Ä–æ–π—Å—Ç–≤: %d", len(expired))
	}
}
