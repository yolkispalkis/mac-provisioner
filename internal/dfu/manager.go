package dfu

import (
	"fmt"
	"os/exec"
	"strings"
	"time"

	"mac-provisioner/internal/device"
)

type Manager struct{}

func New() *Manager {
	return &Manager{}
}

func (m *Manager) EnterDFUMode(serialNumber string) error {
	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º macvdmtool
	if m.hasMacvdmtool() {
		return m.enterDFUWithMacvdmtool(serialNumber)
	}

	// –ï—Å–ª–∏ macvdmtool –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º cfgutil –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
	return m.enterDFUWithCfgutil(serialNumber)
}

func (m *Manager) hasMacvdmtool() bool {
	_, err := exec.LookPath("macvdmtool")
	return err == nil
}

func (m *Manager) enterDFUWithMacvdmtool(serialNumber string) error {
	fmt.Printf("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ macvdmtool –¥–ª—è –≤—Ö–æ–¥–∞ –≤ DFU —Ä–µ–∂–∏–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s\n", serialNumber)

	cmd := exec.Command("macvdmtool", "dfu")
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è macvdmtool dfu: %w", err)
	}

	fmt.Printf("–ö–æ–º–∞–Ω–¥–∞ macvdmtool dfu –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n")
	time.Sleep(15 * time.Second)
	return m.waitForDFUMode(serialNumber)
}

func (m *Manager) enterDFUWithCfgutil(serialNumber string) error {
	fmt.Printf("macvdmtool –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è cfgutil –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s\n", serialNumber)

	cmd := exec.Command("cfgutil", "reboot", "-s", serialNumber)
	if err := cmd.Run(); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ cfgutil: %v\n", err)
	} else {
		fmt.Printf("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ, –æ–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ DFU...\n")
		time.Sleep(5 * time.Second)
	}

	return m.enterDFUManually(serialNumber)
}

func (m *Manager) enterDFUManually(serialNumber string) error {
	deviceInfo := m.getDeviceInfo(serialNumber)

	if m.isAppleSilicon(deviceInfo) {
		return fmt.Errorf("—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ DFU —Ä–µ–∂–∏–º.\n\n"+
			"–î–ª—è Mac –Ω–∞ Apple Silicon:\n"+
			"1. –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–∫–ª—é—á–∏—Ç–µ Mac\n"+
			"2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Mac –∫ —ç—Ç–æ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä—É —á–µ—Ä–µ–∑ USB-C\n"+
			"3. –ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –ø–∏—Ç–∞–Ω–∏—è\n"+
			"4. –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –¥–æ –ø–æ—è–≤–ª–µ–Ω–∏—è '–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞...'\n"+
			"5. –û—Ç–ø—É—Å—Ç–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–∏—Ç–∞–Ω–∏—è\n"+
			"6. Mac –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ DFU —Ä–µ–∂–∏–º–µ\n\n"+
			"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥:\n"+
			"1. –í—ã–∫–ª—é—á–∏—Ç–µ Mac\n"+
			"2. –ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ: –ü—Ä–∞–≤—ã–π Shift + –õ–µ–≤—ã–π Option + –õ–µ–≤—ã–π Control + –ü–∏—Ç–∞–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 —Å–µ–∫—É–Ω–¥\n"+
			"3. –û—Ç–ø—É—Å—Ç–∏—Ç–µ –≤—Å–µ –∫–ª–∞–≤–∏—à–∏\n"+
			"4. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–∏—Ç–∞–Ω–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ DFU —Ä–µ–∂–∏–º–µ", serialNumber)
	} else {
		return fmt.Errorf("—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ DFU —Ä–µ–∂–∏–º.\n\n"+
			"–î–ª—è Intel Mac:\n"+
			"1. –ü–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–∫–ª—é—á–∏—Ç–µ Mac\n"+
			"2. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ Mac –∫ —ç—Ç–æ–º—É –∫–æ–º–ø—å—é—Ç–µ—Ä—É —á–µ—Ä–µ–∑ USB-C –∏–ª–∏ Thunderbolt\n"+
			"3. –ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –ø–∏—Ç–∞–Ω–∏—è 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è\n"+
			"4. –ù–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É –ø–∏—Ç–∞–Ω–∏—è 3 —Å–µ–∫—É–Ω–¥—ã\n"+
			"5. –ü—Ä–æ–¥–æ–ª–∂–∞—è —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–∏—Ç–∞–Ω–∏—è, –Ω–∞–∂–º–∏—Ç–µ –∏ —É–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–Ω–æ–ø–∫—É —É–º–µ–Ω—å—à–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç–∏\n"+
			"6. –£–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –æ–±–µ –∫–Ω–æ–ø–∫–∏ 10 —Å–µ–∫—É–Ω–¥\n"+
			"7. –û—Ç–ø—É—Å—Ç–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–∏—Ç–∞–Ω–∏—è, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –µ—â–µ 5 —Å–µ–∫—É–Ω–¥\n"+
			"8. Mac –¥–æ–ª–∂–µ–Ω –≤–æ–π—Ç–∏ –≤ DFU —Ä–µ–∂–∏–º", serialNumber)
	}
}

func (m *Manager) isAppleSilicon(deviceInfo string) bool {
	info := strings.ToLower(deviceInfo)
	return strings.Contains(info, "apple silicon") ||
		strings.Contains(info, "m1") ||
		strings.Contains(info, "m2") ||
		strings.Contains(info, "m3") ||
		strings.Contains(info, "m4")
}

func (m *Manager) getDeviceInfo(serialNumber string) string {
	cmd := exec.Command("cfgutil", "list")
	output, err := cmd.Output()
	if err != nil {
		return "Unknown"
	}

	lines := strings.Split(string(output), "\n")
	for _, line := range lines {
		if strings.Contains(line, serialNumber) {
			return line
		}
	}

	return "Unknown"
}

func (m *Manager) waitForDFUMode(serialNumber string) error {
	maxAttempts := 60
	fmt.Printf("–û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s –≤ DFU —Ä–µ–∂–∏–º...\n", serialNumber)

	for i := 0; i < maxAttempts; i++ {
		if m.isInDFUMode() {
			fmt.Printf("‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–æ –≤ DFU —Ä–µ–∂–∏–º\n", serialNumber)
			return nil
		}

		if i%10 == 0 {
			fmt.Printf("‚è≥ –ü–æ–ø—ã—Ç–∫–∞ %d/%d: –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ö–æ–¥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ DFU —Ä–µ–∂–∏–º...\n", i+1, maxAttempts)
		}

		time.Sleep(2 * time.Second)
	}

	return fmt.Errorf("‚ùå —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s –Ω–µ –≤–æ—à–ª–æ –≤ DFU —Ä–µ–∂–∏–º –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ (2 –º–∏–Ω—É—Ç—ã)", serialNumber)
}

func (m *Manager) isInDFUMode() bool {
	dfuDevices := m.GetDFUDevices()
	return len(dfuDevices) > 0
}

func (m *Manager) GetDFUDevices() []*device.Device {
	var dfuDevices []*device.Device

	cmd := exec.Command("cfgutil", "list")
	output, err := cmd.Output()
	if err != nil {
		return dfuDevices
	}

	lines := strings.Split(string(output), "\n")
	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" || strings.HasPrefix(line, "Name") {
			continue
		}

		if strings.Contains(line, "Type:") && strings.Contains(line, "ECID:") {
			device := m.parseDFULine(line)
			if device != nil && device.ECID != "" {
				dfuDevices = append(dfuDevices, device)
				fmt.Printf("üîç –ù–∞–π–¥–µ–Ω–æ DFU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: Type=%s, ECID=%s\n", device.Model, device.ECID)
			}
		}
	}

	return dfuDevices
}

func (m *Manager) parseDFULine(line string) *device.Device {
	dev := &device.Device{
		IsDFU: true,
		State: "DFU",
	}

	parts := strings.Fields(line)

	for i, part := range parts {
		if part == "Type:" && i+1 < len(parts) {
			dev.Model = parts[i+1]
		} else if part == "ECID:" && i+1 < len(parts) {
			dev.ECID = parts[i+1]
			dev.SerialNumber = "DFU-" + parts[i+1]
		}
	}

	return dev
}

func (m *Manager) GetFirstDFUECID() string {
	devices := m.GetDFUDevices()
	if len(devices) > 0 {
		return devices[0].ECID
	}
	return ""
}
