package orchestrator

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"time"

	"mac-provisioner/internal/model"
)

// ProvisionResult —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ—à–∏–≤–∫–∏.
type ProvisionResult struct {
	Device *model.Device
	Err    error
}

// runProvisioning –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—à–∏–≤–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–∞–Ω–∞–ª.
func runProvisioning(ctx context.Context, dev *model.Device, resultChan chan<- ProvisionResult) {
	displayName := dev.GetDisplayName()
	log.Printf("‚öôÔ∏è  [PROVISION] –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø—Ä–æ—à–∏–≤–∫–∞ %s", displayName)

	ecid := strings.TrimPrefix(dev.ECID, "0x")
	provCtx, cancel := context.WithTimeout(ctx, 15*time.Minute)
	defer cancel()

	cmd := exec.CommandContext(provCtx, "cfgutil", "--ecid", ecid, "restore")

	spinnerCtx, spinnerCancel := context.WithCancel(ctx)

	go func() {
		spinnerChars := []string{"|", "/", "-", "\\"}
		i := 0
		ticker := time.NewTicker(100 * time.Millisecond)
		defer ticker.Stop()

		for {
			select {
			case <-spinnerCtx.Done():
				fmt.Printf("\r%s\n", strings.Repeat(" ", len(displayName)+20))
				return
			case <-ticker.C:
				fmt.Printf("\r–ü—Ä–æ—à–∏–≤–∫–∞ %s... %s", displayName, spinnerChars[i])
				i = (i + 1) % len(spinnerChars)
			}
		}
	}()

	output, err := cmd.CombinedOutput()

	spinnerCancel()
	time.Sleep(150 * time.Millisecond)

	if err != nil {
		log.Printf("\n‚ùå –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ cfgutil –¥–ª—è %s:\n%s", displayName, string(output))
		errMsg := fmt.Errorf("–æ—à–∏–±–∫–∞ cfgutil: %w", err)
		resultChan <- ProvisionResult{Device: dev, Err: errMsg}
		return
	}

	log.Printf("‚úÖ [PROVISION] –£—Å–ø–µ—à–Ω–∞—è –ø—Ä–æ—à–∏–≤–∫–∞ %s", displayName)
	resultChan <- ProvisionResult{Device: dev, Err: nil}
}

func triggerDFU(ctx context.Context) {
	log.Println("‚ö°Ô∏è [DFU] –ó–∞–ø—É—Å–∫ macvdmtool dfu...")
	cmd := exec.CommandContext(ctx, "macvdmtool", "dfu")
	if err := cmd.Run(); err != nil {
		log.Printf("‚ö†Ô∏è [DFU] macvdmtool –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: %v", err)
	}
}

func isDFUPort(usbLocation string) bool {
	if usbLocation == "" {
		return false
	}
	base := strings.Split(usbLocation, "/")[0]
	return strings.HasPrefix(base, "0x011") || strings.HasPrefix(base, "0x001")
}

// ==================================================================================
// === –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ß–ò–°–¢–ö–ò –ö–ï–®–ê ===
// ==================================================================================
func cleanupConfiguratorCache() {
	log.Println("üßπ [CLEANUP] –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞ Apple Configurator...")

	homeDir, err := os.UserHomeDir()
	if err != nil {
		log.Printf("üßπ [CLEANUP] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: %v", err)
		return
	}

	cachePath := filepath.Join(homeDir, "Library", "Containers", "com.apple.configurator.xpc.DeviceService", "Data", "tmp", "TemporaryItems")

	entries, err := os.ReadDir(cachePath)
	if err != nil {
		if os.IsNotExist(err) {
			log.Printf("üßπ [CLEANUP] –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–µ—à–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ—á–∏—Å—Ç–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
			return
		}
		log.Printf("üßπ [CLEANUP] ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–µ—à–∞ %s: %v", cachePath, err)
		return
	}

	if len(entries) == 0 {
		log.Printf("üßπ [CLEANUP] –ö–µ—à —É–∂–µ –ø—É—Å—Ç.")
		return
	}

	var itemsDeleted int
	for _, entry := range entries {
		fullPath := filepath.Join(cachePath, entry.Name())
		log.Printf("üßπ [CLEANUP] –£–¥–∞–ª–µ–Ω–∏–µ: %s", fullPath)
		if err := os.RemoveAll(fullPath); err != nil {
			log.Printf("üßπ [CLEANUP] ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è %s: %v", fullPath, err)
		} else {
			itemsDeleted++
		}
	}

	log.Printf("üßπ [CLEANUP] ‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–¥–∞–ª–µ–Ω–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: %d.", itemsDeleted)
}
