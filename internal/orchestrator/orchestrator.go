package orchestrator

import (
	"context"
	"log"
	"sync"
	"time"

	"mac-provisioner/internal/config"
	"mac-provisioner/internal/model"
	"mac-provisioner/internal/notifier"
)

// Orchestrator —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
type Orchestrator struct {
	cfg          *config.Config
	notifier     notifier.Notifier
	knownDevices map[string]*model.Device // –ö–∞—Ä—Ç–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ [ID -> Device]
	cooldowns    map[string]time.Time     // –ö–∞—Ä—Ç–∞ –∫—É–ª–¥–∞—É–Ω–æ–≤ [ECID -> CooldownUntil]
	processing   map[string]bool          // –ö–∞—Ä—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—à–∏–≤–∫–∏ [ECID -> true]
	mu           sync.RWMutex             // –ú—å—é—Ç–µ–∫—Å –¥–ª—è –∑–∞—â–∏—Ç—ã –∫–∞—Ä—Ç
}

func New(cfg *config.Config, notifier notifier.Notifier) *Orchestrator {
	return &Orchestrator{
		cfg:          cfg,
		notifier:     notifier,
		knownDevices: make(map[string]*model.Device),
		cooldowns:    make(map[string]time.Time),
		processing:   make(map[string]bool),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
func (o *Orchestrator) Start(ctx context.Context) {
	log.Println("Orchestrator starting...")
	o.notifier.Speak("–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")

	deviceScanChan := make(chan []*model.Device, 1)
	provisionJobsChan := make(chan *model.Device, o.cfg.MaxConcurrentJobs)
	provisionResultsChan := make(chan ProvisionResult, o.cfg.MaxConcurrentJobs)

	var wg sync.WaitGroup

	// –í–æ—Ä–∫–µ—Ä 1: –°–∫–∞–Ω–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	wg.Add(1)
	go func() {
		defer wg.Done()
		ticker := time.NewTicker(o.cfg.CheckInterval)
		defer ticker.Stop()
		for {
			select {
			case <-ctx.Done():
				return
			case <-ticker.C:
				if devices, err := scanUSB(ctx); err == nil {
					deviceScanChan <- devices
				} else {
					log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è USB: %v", err)
				}
			}
		}
	}()

	// –í–æ—Ä–∫–µ—Ä 2: –ü—É–ª –ø—Ä–æ—à–∏–≤–∞–ª—å—â–∏–∫–æ–≤
	wg.Add(1)
	go func() {
		defer wg.Done()
		for {
			select {
			case <-ctx.Done():
				return
			case job := <-provisionJobsChan:
				// –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—É—é –ø—Ä–æ—à–∏–≤–∫—É –≤ —Å–≤–æ–µ–π –≥–æ—Ä—É—Ç–∏–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—É–ª
				go runProvisioning(ctx, job, provisionResultsChan)
			}
		}
	}()

	// –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	dfuTriggerTicker := time.NewTicker(o.cfg.CheckInterval * 2) // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–µ, —á–µ–º —Å–∫–∞–Ω–∏—Ä—É–µ–º
	defer dfuTriggerTicker.Stop()

	for {
		select {
		case <-ctx.Done():
			log.Println("Orchestrator shutting down...")
			wg.Wait() // –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤
			return
		case devices := <-deviceScanChan:
			o.processDeviceList(devices, provisionJobsChan)
		case result := <-provisionResultsChan:
			o.processProvisionResult(result)
		case <-dfuTriggerTicker.C:
			o.checkAndTriggerDFU(ctx)
		}
	}
}

// processDeviceList –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è.
func (o *Orchestrator) processDeviceList(devices []*model.Device, jobs chan<- *model.Device) {
	o.mu.Lock()
	defer o.mu.Unlock()

	currentDevices := make(map[string]bool)

	for _, dev := range devices {
		devID := dev.ID()
		currentDevices[devID] = true

		if dev.ECID != "" && o.processing[dev.ECID] {
			continue // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
		}

		prev, exists := o.knownDevices[devID]
		if !exists {
			// --- –£–õ–£–ß–®–ï–ù–ù–´–ô –õ–û–ì ---
			log.Printf("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: %s (State: %s, ECID: %s)", dev.GetDisplayName(), dev.State, dev.ECID)
			o.notifier.Speak("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ " + dev.GetReadableName())
			o.knownDevices[devID] = dev
		} else if prev.State != dev.State {
			// --- –£–õ–£–ß–®–ï–ù–ù–´–ô –õ–û–ì ---
			log.Printf("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: %s -> %s (ECID: %s)", prev.GetDisplayName(), dev.State, dev.ECID)
			o.knownDevices[devID] = dev
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤–æ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫ –ø—Ä–æ—à–∏–≤–∫–µ
		if dev.State == model.StateDFU && dev.ECID != "" {
			if cooldownTime, onCooldown := o.cooldowns[dev.ECID]; onCooldown && time.Now().Before(cooldownTime) {
				// –ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫—É–ª–¥–∞—É–Ω–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
			} else {
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ—à–∏–≤–∫—É
				o.processing[dev.ECID] = true
				jobs <- dev
			}
		}
	}

	// –ò—â–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
	for id, dev := range o.knownDevices {
		if !currentDevices[id] {
			log.Printf("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ: %s", dev.GetDisplayName())
			o.notifier.Speak("–û—Ç–∫–ª—é—á–µ–Ω–æ " + dev.GetReadableName())
			delete(o.knownDevices, id)
		}
	}
}

// processProvisionResult –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –ø—Ä–æ—à–∏–≤–∫–∏.
func (o *Orchestrator) processProvisionResult(result ProvisionResult) {
	o.mu.Lock()
	defer o.mu.Unlock()

	delete(o.processing, result.Device.ECID)

	if result.Err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ %s: %v", result.Device.GetDisplayName(), result.Err)
		o.notifier.Speak("–û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ " + result.Device.GetReadableName())
	} else {
		log.Printf("‚úÖ –ü—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è %s. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫—É–ª–¥–∞—É–Ω.", result.Device.GetDisplayName())
		o.notifier.Speak("–ü—Ä–æ—à–∏–≤–∫–∞ " + result.Device.GetReadableName() + " –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
		o.cooldowns[result.Device.ECID] = time.Now().Add(o.cfg.DFUCooldown)
	}
}

// checkAndTriggerDFU –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å macvdmtool.
func (o *Orchestrator) checkAndTriggerDFU(ctx context.Context) {
	o.mu.RLock()
	defer o.mu.RUnlock()

	// –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞ DFU-–ø–æ—Ä—Ç—É, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ –≤ –∫—É–ª–¥–∞—É–Ω–µ –∏ –Ω–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
	for _, dev := range o.knownDevices {
		if isDFUPort(dev.USBLocation) && dev.State == model.StateNormal {
			if dev.ECID != "" {
				if o.processing[dev.ECID] {
					continue
				}
				if cooldownTime, onCooldown := o.cooldowns[dev.ECID]; onCooldown && time.Now().Before(cooldownTime) {
					continue
				}
			}
			// –ù–∞—à–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º DFU –∏ –≤—ã—Ö–æ–¥–∏–º
			go triggerDFU(ctx)
			return
		}
	}
}
