package orchestrator

import (
	"context"
	"log"
	"sync"
	"time"

	"mac-provisioner/internal/config"
	"mac-provisioner/internal/model"
	"mac-provisioner/internal/notifier"
)

// Orchestrator —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
type Orchestrator struct {
	cfg             *config.Config
	notifier        notifier.Notifier
	resolver        *Resolver // <-- –ù–û–í–´–ô –ö–û–ú–ü–û–ù–ï–ù–¢
	knownDevices    map[string]*model.Device
	cooldowns       map[string]time.Time
	processing      map[string]bool
	processingPorts map[string]bool
	mu              sync.RWMutex
}

func New(cfg *config.Config, notifier notifier.Notifier) *Orchestrator {
	return &Orchestrator{
		cfg:             cfg,
		notifier:        notifier,
		resolver:        NewResolver(), // <-- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
		knownDevices:    make(map[string]*model.Device),
		cooldowns:       make(map[string]time.Time),
		processing:      make(map[string]bool),
		processingPorts: make(map[string]bool),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
func (o *Orchestrator) Start(ctx context.Context) {
	log.Println("Orchestrator starting...")
	o.notifier.Speak("–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")

	deviceScanChan := make(chan []*model.Device, 1)
	provisionJobsChan := make(chan *model.Device, o.cfg.MaxConcurrentJobs)
	provisionResultsChan := make(chan ProvisionResult, o.cfg.MaxConcurrentJobs)

	var wg sync.WaitGroup

	// –í–æ—Ä–∫–µ—Ä 1: –°–∫–∞–Ω–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	wg.Add(1)
	go func() {
		defer wg.Done()
		ticker := time.NewTicker(o.cfg.CheckInterval)
		defer ticker.Stop()
		for {
			select {
			case <-ctx.Done():
				return
			case <-ticker.C:
				if devices, err := scanUSB(ctx); err == nil {
					// --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π ---
					o.resolver.ResolveAndUpdate(ctx, devices)
					deviceScanChan <- devices
				} else {
					log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è USB: %v", err)
				}
			}
		}
	}()

	// –í–æ—Ä–∫–µ—Ä 2: –ü—É–ª –ø—Ä–æ—à–∏–≤–∞–ª—å—â–∏–∫–æ–≤
	wg.Add(1)
	go func() {
		defer wg.Done()
		for {
			select {
			case <-ctx.Done():
				return
			case job := <-provisionJobsChan:
				go runProvisioning(ctx, job, provisionResultsChan)
			}
		}
	}()

	// –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	dfuTriggerTicker := time.NewTicker(o.cfg.CheckInterval * 2)
	defer dfuTriggerTicker.Stop()

	for {
		select {
		case <-ctx.Done():
			log.Println("Orchestrator shutting down...")
			wg.Wait()
			return
		case devices := <-deviceScanChan:
			o.processDeviceList(devices, provisionJobsChan)
		case result := <-provisionResultsChan:
			o.processProvisionResult(result)
		case <-dfuTriggerTicker.C:
			o.checkAndTriggerDFU(ctx)
		}
	}
}

// ... –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã (processDeviceList, processProvisionResult, checkAndTriggerDFU) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
// –û–Ω–∏ —É–∂–µ –≥–æ—Ç–æ–≤—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
// –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ —è –∏—Ö –Ω–µ –ø—Ä–∏–≤–æ–∂—É, –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–µ—Å—å –∫–æ–¥ –≤—ã—à–µ –≤ —Å–≤–æ–π —Ñ–∞–π–ª.
// –í–ê–ñ–ù–û: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–µ—Ç–æ–¥—ã –≤ —Ñ–∞–π–ª–µ –Ω–µ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.
func (o *Orchestrator) processDeviceList(devices []*model.Device, jobs chan<- *model.Device) {
	o.mu.Lock()
	defer o.mu.Unlock()

	currentDevices := make(map[string]bool)

	for _, dev := range devices {
		devID := dev.ID()
		currentDevices[devID] = true

		if (dev.ECID != "" && o.processing[dev.ECID]) || (dev.USBLocation != "" && o.processingPorts[dev.USBLocation]) {
			continue
		}

		prev, exists := o.knownDevices[devID]
		if !exists {
			log.Printf("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: %s (State: %s, ECID: %s)", dev.GetDisplayName(), dev.State, dev.ECID)
			o.notifier.Speak("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ " + dev.GetReadableName())
			o.knownDevices[devID] = dev
		} else if prev.State != dev.State || prev.Name != dev.Name { // –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
			log.Printf("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: %s -> %s (ECID: %s)", dev.GetDisplayName(), dev.State, dev.ECID)
			o.knownDevices[devID] = dev
		}

		if dev.State == model.StateDFU && dev.ECID != "" {
			if cooldownTime, onCooldown := o.cooldowns[dev.ECID]; onCooldown && time.Now().Before(cooldownTime) {
				// –í –∫—É–ª–¥–∞—É–Ω–µ
			} else {
				o.processing[dev.ECID] = true
				if dev.USBLocation != "" {
					o.processingPorts[dev.USBLocation] = true
				}
				jobs <- dev
			}
		}
	}

	for id, dev := range o.knownDevices {
		if !currentDevices[id] {
			log.Printf("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ: %s", dev.GetDisplayName())
			o.notifier.Speak("–û—Ç–∫–ª—é—á–µ–Ω–æ " + dev.GetReadableName())
			delete(o.knownDevices, id)
		}
	}
}

func (o *Orchestrator) processProvisionResult(result ProvisionResult) {
	o.mu.Lock()
	defer o.mu.Unlock()

	delete(o.processing, result.Device.ECID)
	if result.Device.USBLocation != "" {
		delete(o.processingPorts, result.Device.USBLocation)
	}

	if result.Err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ %s: %v", result.Device.GetDisplayName(), result.Err)
		o.notifier.Speak("–û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ " + result.Device.GetReadableName())
	} else {
		log.Printf("‚úÖ –ü—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è %s. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫—É–ª–¥–∞—É–Ω.", result.Device.GetDisplayName())
		o.notifier.Speak("–ü—Ä–æ—à–∏–≤–∫–∞ " + result.Device.GetReadableName() + " –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
		o.cooldowns[result.Device.ECID] = time.Now().Add(o.cfg.DFUCooldown)
	}
}

func (o *Orchestrator) checkAndTriggerDFU(ctx context.Context) {
	o.mu.RLock()
	defer o.mu.RUnlock()

	for _, dev := range o.knownDevices {
		if isDFUPort(dev.USBLocation) && dev.State == model.StateNormal {
			if (dev.ECID != "" && o.processing[dev.ECID]) || (dev.USBLocation != "" && o.processingPorts[dev.USBLocation]) {
				continue
			}

			if dev.ECID != "" {
				if cooldownTime, onCooldown := o.cooldowns[dev.ECID]; onCooldown && time.Now().Before(cooldownTime) {
					continue
				}
			}

			go triggerDFU(ctx)
			return
		}
	}
}
