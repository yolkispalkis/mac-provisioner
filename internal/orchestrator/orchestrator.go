package orchestrator

import (
	"context"
	"log"
	"sync"
	"time"

	"mac-provisioner/internal/config"
	"mac-provisioner/internal/model"
	"mac-provisioner/internal/notifier"
)

// Orchestrator —É–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
type Orchestrator struct {
	cfg             *config.Config
	notifier        notifier.Notifier
	knownDevices    map[string]*model.Device
	cooldowns       map[string]time.Time
	processing      map[string]bool
	processingPorts map[string]bool
	mu              sync.RWMutex
}

func New(cfg *config.Config, notifier notifier.Notifier) *Orchestrator {
	return &Orchestrator{
		cfg:             cfg,
		notifier:        notifier,
		knownDevices:    make(map[string]*model.Device),
		cooldowns:       make(map[string]time.Time),
		processing:      make(map[string]bool),
		processingPorts: make(map[string]bool),
	}
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
func (o *Orchestrator) Start(ctx context.Context) {
	log.Println("Orchestrator starting...")
	o.notifier.Speak("–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")

	deviceScanChan := make(chan []*model.Device, 1)
	provisionJobsChan := make(chan *model.Device, o.cfg.MaxConcurrentJobs)
	provisionResultsChan := make(chan ProvisionResult, o.cfg.MaxConcurrentJobs)

	var wg sync.WaitGroup

	// –í–æ—Ä–∫–µ—Ä 1: –°–∫–∞–Ω–µ—Ä —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	wg.Add(1)
	go func() {
		defer wg.Done()
		ticker := time.NewTicker(o.cfg.CheckInterval)
		defer ticker.Stop()
		for {
			select {
			case <-ctx.Done():
				return
			case <-ticker.C:
				if devices, err := scanUSB(ctx); err == nil {
					deviceScanChan <- devices
				} else {
					log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è USB: %v", err)
				}
			}
		}
	}()

	// –í–æ—Ä–∫–µ—Ä 2: –ü—É–ª –ø—Ä–æ—à–∏–≤–∞–ª—å—â–∏–∫–æ–≤
	wg.Add(1)
	go func() {
		defer wg.Done()
		for {
			select {
			case <-ctx.Done():
				return
			case job := <-provisionJobsChan:
				go runProvisioning(ctx, job, provisionResultsChan)
			}
		}
	}()

	// –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	dfuTriggerTicker := time.NewTicker(o.cfg.CheckInterval * 2)
	defer dfuTriggerTicker.Stop()

	for {
		select {
		case <-ctx.Done():
			log.Println("Orchestrator shutting down...")
			wg.Wait()
			return
		case devices := <-deviceScanChan:
			o.processDeviceList(devices, provisionJobsChan)
		case result := <-provisionResultsChan:
			o.processProvisionResult(result)
		case <-dfuTriggerTicker.C:
			o.checkAndTriggerDFU(ctx)
		}
	}
}

// processDeviceList - –ü–ï–†–ï–ü–ò–°–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
func (o *Orchestrator) processDeviceList(devices []*model.Device, jobs chan<- *model.Device) {
	o.mu.Lock()
	defer o.mu.Unlock()

	currentDeviceIDs := make(map[string]bool)
	newDeviceMap := make(map[string]*model.Device)

	// 1. –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º "—Ö–æ—Ä–æ—à–∏–µ" –∏–º–µ–Ω–∞ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–ø–∏—Å–∫–∞.
	for _, dev := range devices {
		devID := dev.ID()
		if devID == "" {
			continue
		}
		currentDeviceIDs[devID] = true

		// –ï—Å–ª–∏ –¥–ª—è —ç—Ç–æ–≥–æ ID —É –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å —Å —Ö–æ—Ä–æ—à–∏–º –∏–º–µ–Ω–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ.
		if oldDev, exists := o.knownDevices[devID]; exists && oldDev.Name != "" {
			if dev.Name != oldDev.Name {
				dev.Name = oldDev.Name // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ä–æ–µ, —Ö–æ—Ä–æ—à–µ–µ –∏–º—è.
			}
		}
		newDeviceMap[devID] = dev
	}

	// 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è (–ø–æ–¥–∫–ª—é—á–µ–Ω–æ/–∏–∑–º–µ–Ω–∏–ª–æ—Å—å)
	for devID, dev := range newDeviceMap {
		oldDev, exists := o.knownDevices[devID]

		// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ
		if (dev.ECID != "" && o.processing[dev.ECID]) || (dev.USBLocation != "" && o.processingPorts[dev.USBLocation]) {
			continue
		}

		if !exists {
			log.Printf("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: %s (State: %s, ECID: %s)", dev.GetDisplayName(), dev.State, dev.ECID)
			o.notifier.Speak("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ " + dev.GetReadableName())
		} else if oldDev.State != dev.State {
			log.Printf("üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: %s -> %s (ECID: %s)", dev.GetDisplayName(), dev.State, dev.ECID)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤–æ –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∫ –ø—Ä–æ—à–∏–≤–∫–µ
		if dev.State == model.StateDFU && dev.ECID != "" {
			if cooldownTime, onCooldown := o.cooldowns[dev.ECID]; !onCooldown || time.Now().After(cooldownTime) {
				o.processing[dev.ECID] = true
				if dev.USBLocation != "" {
					o.processingPorts[dev.USBLocation] = true
				}
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ—à–∏–≤–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å —É–∂–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º
				jobs <- dev
			}
		}
	}

	// 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
	for devID, dev := range o.knownDevices {
		if !currentDeviceIDs[devID] {
			log.Printf("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ: %s", dev.GetDisplayName())
			o.notifier.Speak("–û—Ç–∫–ª—é—á–µ–Ω–æ " + dev.GetReadableName())
		}
	}

	// 4. –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ä—Ç—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	o.knownDevices = newDeviceMap
}

func (o *Orchestrator) processProvisionResult(result ProvisionResult) {
	o.mu.Lock()
	defer o.mu.Unlock()

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –±—ã–ª–æ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∑–∞–¥–∞—á–∏
	displayName := result.Device.GetDisplayName()

	delete(o.processing, result.Device.ECID)
	if result.Device.USBLocation != "" {
		delete(o.processingPorts, result.Device.USBLocation)
	}

	if result.Err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ %s: %v", displayName, result.Err)
		o.notifier.Speak("–û—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ " + displayName)
	} else {
		log.Printf("‚úÖ –ü—Ä–æ—à–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è %s. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫—É–ª–¥–∞—É–Ω.", displayName)
		o.notifier.Speak("–ü—Ä–æ—à–∏–≤–∫–∞ " + displayName + " –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
		o.cooldowns[result.Device.ECID] = time.Now().Add(o.cfg.DFUCooldown)
	}
}

func (o *Orchestrator) checkAndTriggerDFU(ctx context.Context) {
	o.mu.RLock()
	defer o.mu.RUnlock()

	for _, dev := range o.knownDevices {
		if isDFUPort(dev.USBLocation) && dev.State == model.StateNormal {
			if (dev.ECID != "" && o.processing[dev.ECID]) || (dev.USBLocation != "" && o.processingPorts[dev.USBLocation]) {
				continue
			}

			if dev.ECID != "" {
				if cooldownTime, onCooldown := o.cooldowns[dev.ECID]; onCooldown && time.Now().Before(cooldownTime) {
					continue
				}
			}

			go triggerDFU(ctx)
			return
		}
	}
}
