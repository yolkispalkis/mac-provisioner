package provisioner

import (
	"log"
	"sync"
	"time"
)

// CooldownEntry –∑–∞–ø–∏—Å—å –æ –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—à–∏—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
type CooldownEntry struct {
	USBLocation   string
	ECID          string
	DeviceName    string
	CompletedAt   time.Time
	CooldownUntil time.Time
}

// CooldownManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–∏–æ–¥–æ–º –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–æ—à–∏–≤–∫–∏
type CooldownManager struct {
	entries        map[string]*CooldownEntry // key = USB location
	mutex          sync.RWMutex
	cooldownPeriod time.Duration
}

func NewCooldownManager(cooldownPeriod time.Duration) *CooldownManager {
	cm := &CooldownManager{
		entries:        make(map[string]*CooldownEntry),
		cooldownPeriod: cooldownPeriod,
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
	go cm.cleanupLoop()

	return cm
}

// AddCompletedDevice –¥–æ–±–∞–≤–ª—è–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–æ–∫ –Ω–µ–¥–∞–≤–Ω–æ –ø—Ä–æ—à–∏—Ç—ã—Ö
func (cm *CooldownManager) AddCompletedDevice(usbLocation, ecid, deviceName string) {
	if usbLocation == "" {
		return
	}

	cm.mutex.Lock()
	defer cm.mutex.Unlock()

	now := time.Now()
	entry := &CooldownEntry{
		USBLocation:   usbLocation,
		ECID:          ecid,
		DeviceName:    deviceName,
		CompletedAt:   now,
		CooldownUntil: now.Add(cm.cooldownPeriod),
	}

	cm.entries[usbLocation] = entry

	log.Printf("üïí –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–µ—Ä–∏–æ–¥ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –¥–æ %s",
		deviceName, entry.CooldownUntil.Format("15:04:05"))
}

// IsInCooldown –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ—Ä—Ç –≤ –ø–µ—Ä–∏–æ–¥–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
func (cm *CooldownManager) IsInCooldown(usbLocation string) (bool, *CooldownEntry) {
	if usbLocation == "" {
		return false, nil
	}

	cm.mutex.RLock()
	defer cm.mutex.RUnlock()

	entry, exists := cm.entries[usbLocation]
	if !exists {
		return false, nil
	}

	if time.Now().Before(entry.CooldownUntil) {
		return true, entry
	}

	return false, nil
}

// GetCooldownInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–∏–æ–¥–µ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
func (cm *CooldownManager) GetCooldownInfo(usbLocation string) (bool, time.Duration, string) {
	inCooldown, entry := cm.IsInCooldown(usbLocation)
	if !inCooldown {
		return false, 0, ""
	}

	remaining := time.Until(entry.CooldownUntil)
	return true, remaining, entry.DeviceName
}

// RemoveCooldown –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
func (cm *CooldownManager) RemoveCooldown(usbLocation string) {
	if usbLocation == "" {
		return
	}

	cm.mutex.Lock()
	defer cm.mutex.Unlock()

	if entry, exists := cm.entries[usbLocation]; exists {
		delete(cm.entries, usbLocation)
		log.Printf("üïí –ü–µ—Ä–∏–æ–¥ –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è —Å–Ω—è—Ç –¥–ª—è %s", entry.DeviceName)
	}
}

// GetAllCooldowns –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è
func (cm *CooldownManager) GetAllCooldowns() []*CooldownEntry {
	cm.mutex.RLock()
	defer cm.mutex.RUnlock()

	var active []*CooldownEntry
	now := time.Now()

	for _, entry := range cm.entries {
		if now.Before(entry.CooldownUntil) {
			// –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
			entryCopy := *entry
			active = append(active, &entryCopy)
		}
	}

	return active
}

// cleanupLoop –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
func (cm *CooldownManager) cleanupLoop() {
	ticker := time.NewTicker(10 * time.Minute)
	defer ticker.Stop()

	for range ticker.C {
		cm.cleanup()
	}
}

// cleanup —É–¥–∞–ª—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
func (cm *CooldownManager) cleanup() {
	cm.mutex.Lock()
	defer cm.mutex.Unlock()

	now := time.Now()
	var removed []string

	for location, entry := range cm.entries {
		if now.After(entry.CooldownUntil) {
			delete(cm.entries, location)
			removed = append(removed, entry.DeviceName)
		}
	}

	if len(removed) > 0 {
		log.Printf("üßπ –û—á–∏—â–µ–Ω—ã –ø–µ—Ä–∏–æ–¥—ã –æ—Ö–ª–∞–∂–¥–µ–Ω–∏—è –¥–ª—è: %v", removed)
	}
}
