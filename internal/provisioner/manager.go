package provisioner

import (
	"context"
	"fmt"
	"log"
	"os/exec"
	"strconv"
	"strings"
	"sync"
	"time"

	"mac-provisioner/internal/device"
	"mac-provisioner/internal/dfu"
	"mac-provisioner/internal/notification"
	"mac-provisioner/internal/stats"
)

/*
=====================================================================

	STRUCT (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
	=====================================================================
*/
type Manager struct {
	dfuManager   *dfu.Manager
	notifier     *notification.Manager
	stats        *stats.Manager
	processing   map[string]bool
	processingMu sync.RWMutex
}

func New(dfuMgr *dfu.Manager, notifier *notification.Manager, stats *stats.Manager) *Manager {
	return &Manager{
		dfuManager: dfuMgr,
		notifier:   notifier,
		stats:      stats,
		processing: make(map[string]bool),
	}
}

/*
=====================================================================

	PUBLIC ‚Äî –û–°–ù–û–í–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê
	=====================================================================
*/
func (m *Manager) ProcessDevice(ctx context.Context, dev *device.Device) {
	m.processingMu.Lock()
	if m.processing[dev.SerialNumber] {
		m.processingMu.Unlock()
		log.Printf("‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ—à–∏–≤–∫–∏ –¥–ª—è %s —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.", dev.SerialNumber)
		return
	}
	m.processing[dev.SerialNumber] = true
	m.processingMu.Unlock()

	defer func() {
		m.processingMu.Lock()
		delete(m.processing, dev.SerialNumber)
		m.processingMu.Unlock()
	}()

	log.Printf("üöÄ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ—à–∏–≤–∫–∏ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %s (–ú–æ–¥–µ–ª—å: %s, ECID: %s)",
		dev.GetFriendlyName(), dev.Model, dev.ECID)

	start := time.Now()
	m.stats.DeviceStarted()
	// targetECID –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–æ–∫

	if !dev.IsDFU {
		log.Printf("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ª–æ–≥–∏–∫–∏: ProcessDevice –≤—ã–∑–≤–∞–Ω –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s –Ω–µ –≤ DFU.", dev.GetFriendlyName())
		m.notifier.RestoreFailed(dev, "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤ DFU")
		m.stats.DeviceCompleted(false, time.Since(start))
		return
	}

	if dev.ECID == "" {
		log.Printf("‚ùå –û—à–∏–±–∫–∞: –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s –≤ DFU, –Ω–æ ECID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ—à–∏–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.", dev.GetFriendlyName())
		m.notifier.RestoreFailed(dev, "ECID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —É DFU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
		m.stats.DeviceCompleted(false, time.Since(start))
		return
	}

	// –¢–µ–ø–µ—Ä—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º targetECID, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
	targetECID := dev.ECID

	log.Printf("‚öôÔ∏è –ù–∞—á–∞–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è DFU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s (ECID: %s)", dev.GetFriendlyName(), targetECID)
	m.notifier.StartingRestore(dev)

	decimalECID, err := normalizeECIDForCfgutil(targetECID) // –ò—Å–ø–æ–ª—å–∑—É–µ–º targetECID
	if err != nil {
		log.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å ECID %s: %v", targetECID, err)
		m.notifier.RestoreFailed(dev, fmt.Sprintf("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ECID: %s", targetECID))
		m.stats.DeviceCompleted(false, time.Since(start))
		return
	}
	log.Printf("‚ÑπÔ∏è –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π ECID –¥–ª—è cfgutil: %s", decimalECID)

	restoreCmdCtx, cancelRestoreCmd := context.WithTimeout(ctx, 15*time.Minute)
	defer cancelRestoreCmd()

	cmd := exec.CommandContext(restoreCmdCtx, "cfgutil", "--ecid", decimalECID, "restore")
	log.Printf("‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: cfgutil --ecid %s restore...", decimalECID)
	restoreOutput, restoreErr := cmd.CombinedOutput()

	if restoreErr != nil {
		if restoreCmdCtx.Err() == context.DeadlineExceeded {
			log.Printf("‚ùå –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 'cfgutil restore' –¥–ª—è ECID %s.", decimalECID)
			errMsg := fmt.Sprintf("cfgutil restore: —Ç–∞–π–º–∞—É—Ç (%v)", 15*time.Minute)
			m.notifier.RestoreFailed(dev, errMsg)
		} else {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è 'cfgutil restore' –¥–ª—è ECID %s: %v", decimalECID, restoreErr)
			log.Printf("Output:\n%s", string(restoreOutput))
			errMsg := fmt.Sprintf("cfgutil restore: %s. %s", restoreErr, –Ω–µ–±–æ–ª—å—à–∞—è–ß–∞—Å—Ç—å(string(restoreOutput), 100))
			m.notifier.RestoreFailed(dev, errMsg)
		}
		m.stats.DeviceCompleted(false, time.Since(start))
		return
	}

	log.Printf("‚úÖ –ö–æ–º–∞–Ω–¥–∞ 'cfgutil restore' –¥–ª—è ECID %s –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ (–ø–æ –¥–∞–Ω–Ω—ã–º —Å–∞–º–æ–π –∫–æ–º–∞–Ω–¥—ã).", decimalECID)

	log.Println("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ DFU —Ä–µ–∂–∏–º–∞ –ø–æ—Å–ª–µ restore (–¥–æ 30 —Å–µ–∫—É–Ω–¥)...")
	postRestoreWaitCtx, postRestoreWaitCancel := context.WithTimeout(ctx, 30*time.Second)
	defer postRestoreWaitCancel()

	ticker := time.NewTicker(3 * time.Second)
	defer ticker.Stop()
	deviceExitedDFU := false

LoopPostRestore:
	for {
		select {
		case <-postRestoreWaitCtx.Done():
			log.Printf("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã—Ö–æ–¥–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ECID %s –∏–∑ DFU —Ä–µ–∂–∏–º–∞.", decimalECID)
			break LoopPostRestore
		case <-ticker.C:
			found := false
			currentDfuDevs := m.dfuManager.GetDFUDevices(postRestoreWaitCtx)
			for _, dfuDev := range currentDfuDevs {
				normEcidCurrent, _ := normalizeECIDForCfgutil(dfuDev.ECID)
				if normEcidCurrent == decimalECID {
					found = true
					break
				}
			}
			if !found {
				deviceExitedDFU = true
				break LoopPostRestore
			}
			log.Printf("... —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ECID %s –≤—Å–µ –µ—â–µ –≤ DFU, –∂–¥–µ–º...", decimalECID)
		case <-ctx.Done():
			log.Println("‚ÑπÔ∏è –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã—Ö–æ–¥–∞ –∏–∑ DFU.")
			m.stats.DeviceCompleted(false, time.Since(start))
			return
		}
	}

	if !deviceExitedDFU {
		log.Printf("‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ECID %s –≤—Å–µ –µ—â–µ –≤ DFU –ø–æ—Å–ª–µ 'cfgutil restore' –∏ –æ–∂–∏–¥–∞–Ω–∏—è. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ—à–∏–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É.", decimalECID)
		m.notifier.RestoreFailed(dev, "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤ DFU –ø–æ—Å–ª–µ restore")
		m.stats.DeviceCompleted(false, time.Since(start))
		return
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º targetECID –¥–ª—è –ª–æ–≥–∞, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ ECID –∏–∑ dev.ECID
	log.Printf("üéâ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è %s (ECID: %s) —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ (—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã—à–ª–æ –∏–∑ DFU).", dev.GetFriendlyName(), targetECID)
	m.notifier.RestoreCompleted(dev)
	m.stats.DeviceCompleted(true, time.Since(start))
}

/*
=====================================================================

	UTILITIES (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
	=====================================================================
*/
func hexToDec(hexStr string) (string, error) {
	cleanHex := strings.ToLower(strings.TrimPrefix(hexStr, "0x"))
	val, err := strconv.ParseUint(cleanHex, 16, 64)
	if err != nil {
		return "", fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ HEX '%s': %w", hexStr, err)
	}
	return strconv.FormatUint(val, 10), nil
}

func isDigits(s string) bool {
	if s == "" {
		return false
	}
	for _, r := range s {
		if r < '0' || r > '9' {
			return false
		}
	}
	return true
}

func normalizeECIDForCfgutil(ecidStr string) (string, error) {
	if ecidStr == "" {
		return "", fmt.Errorf("ECID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}
	if isDigits(ecidStr) {
		return ecidStr, nil
	}
	if strings.HasPrefix(strings.ToLower(ecidStr), "0x") || !isDigits(ecidStr) {
		return hexToDec(ecidStr)
	}
	return "", fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç ECID –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: %s", ecidStr)
}

func –Ω–µ–±–æ–ª—å—à–∞—è–ß–∞—Å—Ç—å(s string, n int) string {
	s = strings.ReplaceAll(s, "\n", " ")
	s = strings.ReplaceAll(s, "\r", " ")
	if len(s) > n {
		return s[:n] + "..."
	}
	return s
}
