package provisioner

import (
	"context"
	"fmt"
	"log"
	"os/exec"
	"strings"
	"sync"
	"time"

	"mac-provisioner/internal/device"
	"mac-provisioner/internal/dfu"
	"mac-provisioner/internal/notification"
	"mac-provisioner/internal/stats"
)

type Manager struct {
	dfuManager   *dfu.Manager
	notifier     *notification.Manager
	stats        *stats.Manager
	processing   map[string]bool
	processingMu sync.RWMutex
}

func New(dfuMgr *dfu.Manager, notifier *notification.Manager, stats *stats.Manager) *Manager {
	return &Manager{
		dfuManager: dfuMgr,
		notifier:   notifier,
		stats:      stats,
		processing: make(map[string]bool),
	}
}

func (m *Manager) ProcessDevice(ctx context.Context, dev *device.Device) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
	m.processingMu.Lock()
	if m.processing[dev.SerialNumber] {
		m.processingMu.Unlock()
		return
	}
	m.processing[dev.SerialNumber] = true
	m.processingMu.Unlock()

	defer func() {
		m.processingMu.Lock()
		delete(m.processing, dev.SerialNumber)
		m.processingMu.Unlock()
	}()

	log.Printf("üîÑ –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s (%s)", dev.SerialNumber, dev.Model)
	startTime := time.Now()
	m.stats.DeviceStarted()

	var targetIdentifier string = dev.SerialNumber

	// –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≤ DFU —Ä–µ–∂–∏–º–µ, –ø–µ—Ä–µ–≤–æ–¥–∏–º –µ–≥–æ
	if !dev.IsDFU {
		m.notifier.EnteringDFUMode(dev.SerialNumber)
		log.Printf("üì± –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ DFU —Ä–µ–∂–∏–º –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s", dev.SerialNumber)

		if err := m.dfuManager.EnterDFUMode(dev.SerialNumber); err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ DFU —Ä–µ–∂–∏–º –¥–ª—è %s: %v", dev.SerialNumber, err)

			if strings.Contains(err.Error(), "—Ä—É—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –≤ DFU —Ä–µ–∂–∏–º") {
				m.notifier.ManualDFURequired(dev.SerialNumber)
				log.Printf("\n" + strings.Repeat("=", 80))
				log.Printf("–¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–û–ô –ü–ï–†–ï–•–û–î –í DFU –†–ï–ñ–ò–ú")
				log.Printf(strings.Repeat("=", 80))
				log.Printf("%v", err)
				log.Printf(strings.Repeat("=", 80) + "\n")

				m.notifier.WaitingForDFU(dev.SerialNumber)
				log.Printf("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ DFU —Ä–µ–∂–∏–º...")

				// –ñ–¥–µ–º –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º DFU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
				if ecid := m.waitForManualDFU(ctx, 60); ecid != "" {
					targetIdentifier = ecid
					log.Printf("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ECID –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: %s", targetIdentifier)
				} else {
					m.notifier.RestoreFailed(dev.SerialNumber, "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –ø–µ—Ä–µ—à–ª–æ –≤ —Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
					m.stats.DeviceCompleted(false, time.Since(startTime))
					return
				}
			} else {
				m.notifier.RestoreFailed(dev.SerialNumber, "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")
				m.notifier.PlayAlert()
				m.stats.DeviceCompleted(false, time.Since(startTime))
				return
			}
		} else {
			m.notifier.DFUModeEntered(dev.SerialNumber)
			time.Sleep(5 * time.Second) // –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ DFU —Ä–µ–∂–∏–º–∞

			// –ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ DFU —Ä–µ–∂–∏–º –ø–æ–ª—É—á–∞–µ–º ECID
			if ecid := m.dfuManager.GetFirstDFUECID(); ecid != "" {
				targetIdentifier = ecid
				log.Printf("üîÑ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–æ—à–ª–æ –≤ DFU —Ä–µ–∂–∏–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ECID: %s", targetIdentifier)
			}
		}
	} else {
		// –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –≤ DFU —Ä–µ–∂–∏–º–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ ECID
		if dev.ECID != "" {
			targetIdentifier = dev.ECID
			log.Printf("üîÑ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –≤ DFU —Ä–µ–∂–∏–º–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ECID: %s", targetIdentifier)
		}
	}

	// –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
	m.notifier.StartingRestore(dev.SerialNumber)
	log.Printf("üîß –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s (–∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: %s)", dev.SerialNumber, targetIdentifier)

	if err := m.restoreDevice(ctx, targetIdentifier, dev.SerialNumber); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s: %v", targetIdentifier, err)
		m.notifier.RestoreFailed(dev.SerialNumber, err.Error())
		m.notifier.PlayAlert()
		m.stats.DeviceCompleted(false, time.Since(startTime))
		return
	}

	m.notifier.RestoreCompleted(dev.SerialNumber)
	m.notifier.PlaySuccess()
	m.stats.DeviceCompleted(true, time.Since(startTime))
	log.Printf("‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s –∑–∞ %v", dev.SerialNumber, time.Since(startTime).Round(time.Second))
}

func (m *Manager) waitForManualDFU(ctx context.Context, timeoutSeconds int) string {
	for i := 0; i < timeoutSeconds/2; i++ {
		select {
		case <-ctx.Done():
			return ""
		default:
		}

		time.Sleep(2 * time.Second)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ DFU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
		dfuDevices := m.dfuManager.GetDFUDevices()
		if len(dfuDevices) > 0 {
			log.Printf("‚úÖ –ù–∞–π–¥–µ–Ω—ã DFU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %+v", dfuDevices)
			return dfuDevices[0].ECID
		}

		if i%5 == 0 {
			log.Printf("‚è≥ –í—Å–µ –µ—â–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è DFU —Ä–µ–∂–∏–º... (%d/%d —Å–µ–∫—É–Ω–¥)", i*2, timeoutSeconds)
		}
	}

	return ""
}

func (m *Manager) restoreDevice(ctx context.Context, identifier, originalSerial string) error {
	log.Printf("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s...", identifier)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —ç—Ç–æ ECID –∏–ª–∏ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä
	var cmd *exec.Cmd
	if strings.HasPrefix(identifier, "0x") {
		// –≠—Ç–æ ECID, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
		log.Printf("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ECID –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: %s", identifier)
		cmd = exec.Command("cfgutil", "restore", "-e", identifier, "--erase")
	} else {
		// –≠—Ç–æ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä
		log.Printf("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: %s", identifier)
		cmd = exec.Command("cfgutil", "restore", "-s", identifier, "--erase")
	}

	if err := cmd.Run(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ cfgutil restore: %w", err)
	}

	return m.waitForRestoreCompletion(ctx, identifier, originalSerial)
}

func (m *Manager) waitForRestoreCompletion(ctx context.Context, identifier, originalSerial string) error {
	log.Printf("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s...", identifier)

	maxWaitTime := 30 * time.Minute
	checkInterval := 30 * time.Second

	timeout := time.After(maxWaitTime)
	ticker := time.NewTicker(checkInterval)
	defer ticker.Stop()

	lastStatus := ""

	for {
		select {
		case <-ctx.Done():
			return fmt.Errorf("–æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
		case <-timeout:
			return fmt.Errorf("—Ç–∞–π–º–∞—É—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s", identifier)
		case <-ticker.C:
			status, err := m.getDeviceStatus(identifier)
			if err != nil {
				continue
			}

			log.Printf("–°—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s: %s", identifier, status)

			if status != lastStatus && status != "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" {
				readableStatus := m.getReadableStatus(status)
				m.notifier.RestoreProgress(originalSerial, readableStatus)
				lastStatus = status
			}
			if m.isRestoreComplete(status) {
				log.Printf("–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s", identifier)
				return nil
			}
		}
	}
}

func (m *Manager) getDeviceStatus(identifier string) (string, error) {
	cmd := exec.Command("cfgutil", "list")
	output, err := cmd.Output()
	if err != nil {
		return "", err
	}

	lines := strings.Split(string(output), "\n")
	for _, line := range lines {
		// –ò—â–µ–º –ø–æ ECID –∏–ª–∏ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
		if strings.Contains(line, identifier) {
			return line, nil
		}
	}

	return "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", nil
}

func (m *Manager) getReadableStatus(status string) string {
	status = strings.ToLower(status)

	if strings.Contains(status, "dfu") {
		return "–≤ —Ä–µ–∂–∏–º–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
	}
	if strings.Contains(status, "recovery") {
		return "–≤ —Ä–µ–∂–∏–º–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
	}
	if strings.Contains(status, "restoring") {
		return "–≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—à–∏–≤–∫—É"
	}
	if strings.Contains(status, "available") {
		return "–¥–æ—Å—Ç—É–ø–Ω–æ"
	}
	if strings.Contains(status, "paired") {
		return "—Å–æ–ø—Ä—è–∂–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ"
	}

	return "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
}

func (m *Manager) isRestoreComplete(status string) bool {
	status = strings.ToLower(status)

	return !strings.Contains(status, "dfu") &&
		!strings.Contains(status, "recovery") &&
		!strings.Contains(status, "restoring") &&
		(strings.Contains(status, "available") || strings.Contains(status, "paired"))
}
