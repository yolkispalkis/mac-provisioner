package provisioner

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os/exec"
	"strconv"
	"strings"
	"sync"
	"time"

	"mac-provisioner/internal/device"
	"mac-provisioner/internal/dfu"
	"mac-provisioner/internal/notification"
)

type Manager struct {
	dfuManager *dfu.Manager
	notifier   *notification.Manager
	processing map[string]bool
	mutex      sync.RWMutex
}

type RestoreResponse struct {
	Type    string `json:"Type"`
	Message string `json:"Message"`
	Code    int    `json:"Code"`
}

func New(dfuMgr *dfu.Manager, notifier *notification.Manager) *Manager {
	return &Manager{
		dfuManager: dfuMgr,
		notifier:   notifier,
		processing: make(map[string]bool),
	}
}

func (m *Manager) IsProcessing(deviceID string) bool {
	m.mutex.RLock()
	defer m.mutex.RUnlock()
	return m.processing[deviceID]
}

func (m *Manager) ProcessDevice(ctx context.Context, dev *device.Device) {
	deviceID := dev.UniqueID()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
	m.mutex.Lock()
	if m.processing[deviceID] {
		m.mutex.Unlock()
		log.Printf("‚ÑπÔ∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ %s —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è", dev.Name)
		return
	}
	m.processing[deviceID] = true
	m.mutex.Unlock()

	defer func() {
		m.mutex.Lock()
		delete(m.processing, deviceID)
		m.mutex.Unlock()
	}()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
	if !dev.IsDFU || dev.ECID == "" {
		m.notifier.RestoreFailed(dev, "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ—à–∏–≤–∫–µ")
		return
	}

	// –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º ECID –¥–ª—è cfgutil
	ecid, err := m.normalizeECID(dev.ECID)
	if err != nil {
		m.notifier.RestoreFailed(dev, "–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ECID")
		return
	}

	log.Printf("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—à–∏–≤–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ %s (ECID: %s)", dev.Name, ecid)
	m.notifier.StartingRestore(dev)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
	progressCtx, cancelProgress := context.WithCancel(ctx)
	go m.announceProgress(progressCtx, dev)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—à–∏–≤–∫—É
	err = m.runRestore(ctx, ecid)
	cancelProgress()

	if err != nil {
		m.notifier.RestoreFailed(dev, err.Error())
	} else {
		m.notifier.RestoreCompleted(dev)
	}
}

func (m *Manager) runRestore(ctx context.Context, ecid string) error {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	restoreCtx, cancel := context.WithTimeout(ctx, 15*time.Minute)
	defer cancel()

	// –ó–∞–ø—É—Å–∫–∞–µ–º cfgutil restore
	cmd := exec.CommandContext(restoreCtx, "cfgutil", "--ecid", ecid, "--format", "JSON", "restore")

	var stdout, stderr bytes.Buffer
	cmd.Stdout = &stdout
	cmd.Stderr = &stderr

	err := cmd.Run()

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	if err != nil {
		if restoreCtx.Err() == context.DeadlineExceeded {
			return fmt.Errorf("—Ç–∞–π–º–∞—É—Ç –ø—Ä–æ—à–∏–≤–∫–∏")
		}
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è cfgutil: %v", err)
	}

	// –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
	return m.parseRestoreResult(stdout.String())
}

func (m *Manager) parseRestoreResult(output string) error {
	// –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é JSON —Å—Ç—Ä–æ–∫—É –≤ –≤—ã–≤–æ–¥–µ
	lines := strings.Split(output, "\n")
	var jsonLine string

	for i := len(lines) - 1; i >= 0; i-- {
		line := strings.TrimSpace(lines[i])
		if strings.HasPrefix(line, "{") && strings.HasSuffix(line, "}") {
			jsonLine = line
			break
		}
	}

	if jsonLine == "" {
		return fmt.Errorf("–Ω–µ –Ω–∞–π–¥–µ–Ω JSON –æ—Ç–≤–µ—Ç –æ—Ç cfgutil")
	}

	var response RestoreResponse
	if err := json.Unmarshal([]byte(jsonLine), &response); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ cfgutil: %v", err)
	}

	switch response.Type {
	case "CommandOutput":
		return nil // –£—Å–ø–µ—Ö
	case "Error":
		return fmt.Errorf(m.mapErrorCode(response.Code, response.Message))
	default:
		return fmt.Errorf("–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞: %s", response.Type)
	}
}

func (m *Manager) mapErrorCode(code int, message string) string {
	switch code {
	case 9:
		return "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–∏–ª–æ—Å—å –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ—à–∏–≤–∫–∏"
	case 14:
		return "–ø–æ–≤—Ä–µ–∂–¥–µ–Ω —Ñ–∞–π–ª –ø—Ä–æ—à–∏–≤–∫–∏"
	case 21:
		return "–æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"
	case 40:
		return "–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—à–∏–≤–∫—É"
	default:
		return fmt.Sprintf("–æ—à–∏–±–∫–∞ –ø—Ä–æ—à–∏–≤–∫–∏ (–∫–æ–¥ %d): %s", code, message)
	}
}

func (m *Manager) normalizeECID(ecid string) (string, error) {
	if ecid == "" {
		return "", fmt.Errorf("ECID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	// –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ –¥–µ—Å—è—Ç–∏—á–Ω–æ–µ —á–∏—Å–ª–æ
	if m.isDecimal(ecid) {
		return ecid, nil
	}

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ hex –≤ decimal
	clean := strings.TrimPrefix(strings.ToLower(ecid), "0x")
	value, err := strconv.ParseUint(clean, 16, 64)
	if err != nil {
		return "", fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ECID: %v", err)
	}

	return strconv.FormatUint(value, 10), nil
}

func (m *Manager) isDecimal(s string) bool {
	for _, r := range s {
		if r < '0' || r > '9' {
			return false
		}
	}
	return len(s) > 0
}

func (m *Manager) announceProgress(ctx context.Context, dev *device.Device) {
	ticker := time.NewTicker(60 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			return
		case <-ticker.C:
			m.notifier.RestoreProgress(dev, "–ø—Ä–æ—à–∏–≤–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è")
		}
	}
}
